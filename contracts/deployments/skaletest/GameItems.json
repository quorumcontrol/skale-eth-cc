{
  "address": "0x4d4AD334b612E8Da2D51f820DddcB6abea5195c2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diceRollerContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPlayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256[3]",
          "name": "initialTokens",
          "type": "uint256[3]"
        }
      ],
      "name": "NewPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "TierUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIN_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animation",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "beats",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "beats",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IGameItems.GameItemMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOnChainToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "beats",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IGameItems.GameItemMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "initialMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playoff",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiever",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "winBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4360c8ea4b2c6c6207dd87e835f4eb3671874ed297e101cf38fcba0b53eadbae",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x905173B6C0A51925d3C9B619466c623c754Fb7BB",
    "contractAddress": "0x4d4AD334b612E8Da2D51f820DddcB6abea5195c2",
    "transactionIndex": 0,
    "gasUsed": "5223860",
    "logsBloom": "0x
    "blockHash": "0xc304954db58da7012a9589e3ad9da6a0ff8c1885a7e506ff2bd348807d2cde78",
    "transactionHash": "0x4360c8ea4b2c6c6207dd87e835f4eb3671874ed297e101cf38fcba0b53eadbae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1239951,
        "transactionHash": "0x4360c8ea4b2c6c6207dd87e835f4eb3671874ed297e101cf38fcba0b53eadbae",
        "address": "0x4d4AD334b612E8Da2D51f820DddcB6abea5195c2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc304954db58da7012a9589e3ad9da6a0ff8c1885a7e506ff2bd348807d2cde78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1239951,
        "transactionHash": "0x4360c8ea4b2c6c6207dd87e835f4eb3671874ed297e101cf38fcba0b53eadbae",
        "address": "0x4d4AD334b612E8Da2D51f820DddcB6abea5195c2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc304954db58da7012a9589e3ad9da6a0ff8c1885a7e506ff2bd348807d2cde78"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1239951,
        "transactionHash": "0x4360c8ea4b2c6c6207dd87e835f4eb3671874ed297e101cf38fcba0b53eadbae",
        "address": "0x4d4AD334b612E8Da2D51f820DddcB6abea5195c2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc304954db58da7012a9589e3ad9da6a0ff8c1885a7e506ff2bd348807d2cde78"
      }
    ],
    "blockNumber": 1239951,
    "cumulativeGasUsed": "5223860",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x90C9eCc0D4a842BB97347D745977B156e83d939c"
  ],
  "numDeployments": 2,
  "solcInputHash": "0007522f3800c7896bd1dda6ea61b605",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diceRollerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPlayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[3]\",\"name\":\"initialTokens\",\"type\":\"uint256[3]\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"TierUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animation\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IGameItems.GameItemMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOnChainToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IGameItems.GameItemMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"initialMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playoff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"winBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"TobowerTheGreatAxios\",\"details\":\"This smart contract is an ERC-1155 standard contractThis contract is the core tokens for the mini-game*\",\"events\":{\"NewItem(uint256)\":{\"details\":\"Used in the [addItem] function\",\"params\":{\"tokenId\":\"The [tokenId] that was created\"}},\"NewPlayer(address,uint256[3])\":{\"details\":\"Used in the [initialMint] functionAll Tokens Minted will be equal to 1\",\"params\":{\"initialTokens\":\"The [initialTokens] that were added EXACT === 3\",\"newPlayer\":\"The [newPlayer]that was added by address\"}},\"TierUnlocked(address,uint256,uint8)\":{\"details\":\"Used inside the [winBattle] function\",\"params\":{\"player\":\"The [player] who is unlocked a new tier\",\"tier\":\"The [tier] that was unlocked\",\"tokenId\":\"The [tokenId] that was granted for this new tier\"}}},\"kind\":\"dev\",\"methods\":{\"addItem(uint8,string,string,string,string,uint256[],string)\":{\"details\":\"Creates Metadata -> Stores as New IndexSets Token URI for Backward Compatability with MarketplacesUpdates Number Of ItemsEmits [NewItem] event\",\"params\":{\"animation\":\"Animation of the Item\",\"beats\":\"List of who the token beats\",\"description\":\"Description of the Item\",\"image\":\"Image of the Item\",\"name\":\"Name of the Item\",\"tokenURI\":\"Gen I Token URI\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getItems(address)\":{\"details\":\"Thoughts on making this a signed request during ETH CC?\",\"params\":{\"_address\":\"of the user\"},\"returns\":{\"_0\":\"GameItemMetadata[] the items of the player\"}},\"getOnChainToken(uint256)\":{\"params\":{\"tokenId\":\"of the token to retreive\"},\"returns\":{\"_0\":\"GameItemMetadata of the Item\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUnlockDate()\":{\"details\":\"Can be deprecated\",\"returns\":{\"_0\":\"uint256 time in epoch * 1000\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialMint(address)\":{\"details\":\"Initial Mint FunctionOnly Callalble by MINTER_ROLEEmits [NewPlayer] event and adds a new player\",\"params\":{\"receiver\":\"the individual receiving the intial mint\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isLocked()\":{\"details\":\"Internal/ExternalReturns True if Locked\",\"returns\":{\"_0\":\"bool if is locked\"}},\"playoff()\":{\"details\":\"Uses RNG to Find # between 0-1000Returns true for P2, False for P2\",\"returns\":{\"_0\":\"bool \"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty.\"},\"winBattle(address,uint256)\":{\"details\":\"On Battle Win -> Win Manager Mints\",\"params\":{\"receiever\":\"the user that wins\",\"tokenId\":\"The tokenId to be minted\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewItem(uint256)\":{\"notice\":\"Emits a new item being added to the contract [token]\"},\"NewPlayer(address,uint256[3])\":{\"notice\":\"Emits a new player being added to the contract [address]\"},\"TierUnlocked(address,uint256,uint8)\":{\"notice\":\"Emits a TierUnlocked allowing for the frontend to notify the player\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Admin Role to Toggle Contract\"},\"MINTER_ROLE()\":{\"notice\":\"Can Fire Initial Mint\"},\"WIN_MANAGER_ROLE()\":{\"notice\":\"Can Mint on Wini\"},\"addItem(uint8,string,string,string,string,uint256[],string)\":{\"notice\":\"Admin Function that enables the admin owner to add new tokens to the contract storage\"},\"getItems(address)\":{\"notice\":\"Loads all the Metadata by a player in order to allow them to load the data\"},\"getNumberPlayers()\":{\"notice\":\"Retreives the current number of players/holders\"},\"getOnChainToken(uint256)\":{\"notice\":\"Returns on Chain Token - Single (Metadata)\"},\"getUnlockDate()\":{\"notice\":\"Retreives Unlock Date\"},\"isLocked()\":{\"notice\":\"Checks if contract is locked\"},\"playoff()\":{\"notice\":\"Playoff Function for Battle.sol\"},\"supportsInterface(bytes4)\":{\"notice\":\"Required for Inheriting Contracts\"},\"winBattle(address,uint256)\":{\"notice\":\"WIN_MANAGER_CALL\"}},\"notice\":\"GameItems for ETH CC\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameItems.sol\":\"GameItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/GameItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"./interfaces/IGameItems.sol\\\";\\nimport \\\"./interfaces/IDiceRoller.sol\\\";\\n\\n/**\\n*\\n* GameItems for ETH CC\\n*\\n* @author Tobower\\n* @author TheGreatAxios\\n*\\n* @dev This smart contract is an ERC-1155 standard contract\\n* @dev This contract is the core tokens for the mini-game\\n*\\n**/\\ncontract GameItems is AccessControlEnumerable, ERC1155URIStorage, IGameItems {\\n\\n    /// @notice Admin Role to Toggle Contract\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    /// @notice Can Fire Initial Mint\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    /// @notice Can Mint on Wini\\n    bytes32 public constant WIN_MANAGER_ROLE = keccak256(\\\"WIN_MANAGER_ROLE\\\");\\n\\n    /// @notice the contract that provides random numbers\\n    IDiceRoller immutable diceRoller;\\n\\n    /// @notice Number of Items on the contract\\n    uint256 private numberItems;\\n    /// @notice Number of Active Players\\n    uint256 private numberPlayers;\\n    /// @notice The storage of the shared items on-chain #SKALE\\n    mapping(uint256 => GameItemMetadata) private metadata;\\n\\n    /// @notice Modifier Error String\\n    string private constant ACCESS_DENIED = \\\"Access Denied\\\";\\n    /// @notice InActive Error String\\n    string private constant CONTRACT_IN_ACTIVE = \\\"Not Enough Items\\\";\\n    /// @notice Invalid New Player - Already Has NFTs\\n    string private constant INVALID_NEW_PLAYER = \\\"Already Playing\\\";\\n    /// @notice Not an Item\\n    string private constant ITEM_DOES_NOT_EXIST = \\\"Item Does Not Exist\\\";\\n    /// @notice User Does Not Have Item\\n    string private constant USER_NO_ITEM = \\\"Missing an item\\\";\\n\\n    /// @notice Unlock Date After Etherum CC is Over\\n    uint256 private unlockDate = 1658451660;\\n    \\n    /// @notice Emits a new item being added to the contract [token]\\n    /// @dev Used in the [addItem] function\\n    /// @param tokenId The [tokenId] that was created\\n    event NewItem(uint256 indexed tokenId);\\n\\n    /// @notice Emits a new player being added to the contract [address]\\n    /// @dev Used in the [initialMint] function\\n    /// @dev All Tokens Minted will be equal to 1\\n    /// @param newPlayer The [newPlayer]that was added by address\\n    /// @param initialTokens The [initialTokens] that were added EXACT === 3\\n    // @param timestamp The [timestamp] of the new player joining\\n    event NewPlayer(address indexed newPlayer, uint256[3] indexed initialTokens);\\n\\n    /// @notice Emits a TierUnlocked allowing for the frontend to notify the player\\n    /// @dev Used inside the [winBattle] function\\n    /// @param player The [player] who is unlocked a new tier\\n    /// @param tokenId The [tokenId] that was granted for this new tier\\n    /// @param tier The [tier] that was unlocked\\n    event TierUnlocked(address indexed player, uint256 indexed tokenId, uint8 indexed tier);\\n\\n    constructor(address diceRollerContract) ERC1155(\\\"GameItems\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n        diceRoller = IDiceRoller(diceRollerContract);\\n        numberItems = 0;\\n        numberPlayers = 0;\\n    }\\n\\n    /// @notice Only Admin -> Calls Add Item\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Only Minter -> Calls Initial Mint\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Only Win Manager -> Call via Proxy\\n    modifier onlyWinManager() {\\n        require(hasRole(WIN_MANAGER_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Admin Function that enables the admin owner to add new tokens to the contract storage\\n    /// @dev Creates Metadata -> Stores as New Index\\n    /// @dev Sets Token URI for Backward Compatability with Marketplaces\\n    /// @dev Updates Number Of Items\\n    /// @dev Emits [NewItem] event\\n    /// @param name Name of the Item\\n    /// @param description Description of the Item\\n    /// @param image Image of the Item\\n    /// @param animation Animation of the Item\\n    /// @param beats List of who the token beats\\n    /// @param tokenURI Gen I Token URI\\n    function addItem(uint8 tier, string memory name, string memory description, string memory image, string memory animation, uint256[] memory beats, string memory tokenURI) override external onlyAdmin {\\n        uint256 _currentItemIndex = numberItems;\\n        GameItemMetadata memory newItem = GameItemMetadata(tier, name, description, image, animation, beats);\\n        metadata[_currentItemIndex] = newItem;\\n        _setURI(_currentItemIndex, tokenURI);\\n        numberItems++;\\n        emit NewItem(_currentItemIndex);\\n    }\\n\\n    /// @notice Returns on Chain Token - Single (Metadata)\\n    /// @param tokenId of the token to retreive\\n    /// @return GameItemMetadata of the Item\\n    function getOnChainToken(uint256 tokenId)  external view  returns (GameItemMetadata memory) { \\n        return metadata[tokenId];\\n    }\\n\\n    /// @notice Loads all the Metadata by a player in order to allow them to load the data\\n    /// @dev Thoughts on making this a signed request during ETH CC?\\n    /// @param _address of the user\\n    /// @return GameItemMetadata[] the items of the player\\n    function getItems(address _address) override external view returns (GameItemMetadata[] memory) {\\n        GameItemMetadata[] memory _items = new GameItemMetadata[](numberItems);\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            if (balanceOf(_address, i) >= 1) {\\n                _items[i] = metadata[i];\\n            }\\n        }\\n\\n        return _items;\\n    }\\n\\n    /// @notice Retreives the current number of players/holders\\n    function getNumberPlayers() override external view returns (uint256) {\\n        return numberPlayers;\\n    }\\n\\n    function getNumberItems() external view returns (uint256) {\\n        return numberItems;\\n    }\\n\\n    /// @notice Retreives Unlock Date\\n    /// @dev Can be deprecated\\n    /// @return uint256 time in epoch * 1000\\n    function getUnlockDate() external view returns (uint256) {\\n        return unlockDate;\\n    }\\n\\n    /// @dev Initial Mint Function\\n    /// @dev Only Callalble by MINTER_ROLE\\n    /// @dev Emits [NewPlayer] event and adds a new player\\n    /// @param receiver the individual receiving the intial mint\\n    function initialMint(address payable receiver) override external payable onlyMinter {\\n        require(_noBalances(receiver), INVALID_NEW_PLAYER);\\n\\n        // uint256[][] memory options = [\\n        //     [uint256(0),1,2],\\n        //     [uint256(1),2,3],\\n        //     [uint256(2),3,4],\\n        //     [uint256(0),2,4],\\n        //     [uint256(1),3,4],\\n        // ];\\n        uint256[3] memory opt1 = [uint256(0),1,2];\\n        uint256[3] memory opt2 = [uint256(1),2,3];\\n        uint256[3] memory opt3 = [uint256(2),3,4];\\n        uint256[3] memory opt4 = [uint256(0),2,4];\\n        uint256[3] memory opt5 = [uint256(1),3,4];\\n        uint256 _rng = _getRandomNumber(0, 4);\\n\\n        uint256[3] memory tokenIds = [uint256(0), 0, 0];\\n\\n        if (_rng == 0) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt1[i]);\\n                tokenIds = opt1;\\n            }\\n        } else if (_rng == 1) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt2[i]);\\n                tokenIds = opt2;\\n            }\\n        } else if (_rng == 2) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt3[i]);\\n                tokenIds = opt3;\\n            }\\n        } else if (_rng == 3) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt4[i]);\\n                tokenIds = opt4;\\n            }\\n        } else if (_rng == 4) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt5[i]);\\n                tokenIds = opt5;\\n                \\n            }\\n        }\\n\\n        numberPlayers++;\\n        receiver.transfer(msg.value);\\n        emit NewPlayer(receiver, tokenIds);\\n    }\\n\\n    /// @notice Checks if contract is locked\\n    /// @dev Internal/External\\n    /// @dev Returns True if Locked\\n    /// @return bool if is locked\\n    function isLocked() public view returns (bool) {\\n        return block.timestamp <= unlockDate;\\n    }\\n\\n    /// @notice Required for Inheriting Contracts\\n    function supportsInterface(bytes4 interfaceId) public view override (AccessControlEnumerable, ERC1155, IERC165) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Playoff Function for Battle.sol\\n    /// @dev Uses RNG to Find # between 0-1000\\n    /// @dev Returns true for P2, False for P2\\n    /// @return bool \\n    function playoff() override external view onlyWinManager returns (bool) {\\n        return _getRandomNumber(0, 1000) < 500;\\n    }\\n\\n    /// @notice WIN_MANAGER_CALL\\n    /// @dev On Battle Win -> Win Manager Mints\\n    /// @param receiever the user that wins\\n    /// @param tokenId The tokenId to be minted\\n    function winBattle(address receiever, uint256 tokenId) override external onlyWinManager {\\n        /// Run Internal Mint for the Winner\\n        _internalMint(receiever, tokenId);\\n        /// Check The Tier of the Winner Item\\n        uint8 tier = metadata[tokenId].tier;\\n        if ((tier == 1 || tier == 2) && _checkTier(receiever, tier)) {\\n            uint256 nextTierTokenId = _randomTokenId(tier + 1);\\n            _internalMint(receiever, nextTierTokenId);\\n            emit TierUnlocked(receiever, nextTierTokenId, tier + 1);\\n        }\\n        /// Else Nothing Since there is not another tier\\n        \\n    }\\n\\n    function _checkTier(address receiver, uint256 tier) internal view returns (bool) {\\n        uint256 start = tier == 1 ? 0 : 5;\\n        uint256 stop = tier == 1 ? 5 : 9;\\n        for (uint256 i = start; i < stop; i++) {\\n            if (balanceOf(receiver, i) == 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal Mint\\n    /// @dev Mints the Selected Token Id to the Selected Reciever\\n    /// @dev Always mints only 1\\n    /// @param receiver address of the person who the token will go to\\n    /// @param tokenId The Specific token they should receive\\n    function _internalMint(address receiver, uint256 tokenId) internal {\\n        _mint(receiver, tokenId, 1, \\\"\\\");\\n    }\\n\\n    /// @notice Checks If a Player being added has toknes\\n    /// @dev Will Return True -> Allowing New Player to Be Created\\n    /// @dev If Player has any token, will not allow them to be added again\\n    /// @param checkFor address to check\\n    function _noBalances(address checkFor) internal view returns (bool) {\\n        for (uint256 i = 0; i < numberItems; i++) {\\n            if (balanceOf(checkFor, i) > 0) return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Selects a Random Token Id of the Next Tier\\n    /// @dev Utilizes RNG Plus Length of Previous Item List\\n    /// @dev !!! Unsure if the else statement should be here, theoretically impossible !!!\\n    /// @param tier uint8 of the next tier to select\\n    /// @return uint256 of the tokenId Selected\\n    function _randomTokenId(uint8 tier) internal view returns (uint256) {\\n        /// Tier == 2 -> returns 5, 6, 7, 8\\n        if (tier == 2) {\\n            return _getRandomNumber(5, 3);\\n        /// Tier == 3 -> returns 9, 10, 11\\n        } else if (tier == 3) {\\n            return _getRandomNumber(9, 2);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice SKALE RNG Casting\\n    /// @param minNumber the Minimum Number\\n    /// @param maxNumber the Max Number\\n    /// @return uint256 the returned random number \\n    function _getRandomNumber(uint256 minNumber, uint256 maxNumber) internal view returns (uint256) {\\n        uint256 _rng = minNumber + (uint256(diceRoller.getRandom()) % maxNumber);\\n        return _rng;\\n    }\\n    \\n}\",\"keccak256\":\"0xb1a1d0ac50ef4c901693a54c0def1d7f85ef5815cc0a2ba5e8a8badf55dbcb00\",\"license\":\"MIT\"},\"contracts/interfaces/IDiceRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDiceRoller {\\n\\n  function getRandom() external view returns (bytes32 rnd);\\n\\n}\",\"keccak256\":\"0x2cebcd9df36dd054dcba79fcec31e97f19fe48ffcaf10afd4ae0832965d9f5de\",\"license\":\"MIT\"},\"contracts/interfaces/IGameItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IGameItems is IERC1155 {\\n    struct GameItemMetadata {\\n        uint8 tier;\\n        string name;\\n        string description;\\n        string image;\\n        string animationUrl;\\n        uint256[] beats; // tokenIds of the tokens it beats\\n    }\\n\\n    function addItem(uint8 tier, string memory name, string memory description, string memory image, string memory animation, uint256[] memory beats, string memory tokenURI) external;\\n    function getOnChainToken(uint256 tokenId) external returns (GameItemMetadata memory);\\n    function getItems(address _address) external returns (GameItemMetadata[] memory);\\n    function getNumberItems() external returns (uint256);\\n    function getNumberPlayers() external returns (uint256);\\n    function getUnlockDate() external returns (uint256);\\n    function initialMint(address payable receiver) payable external;\\n    function isLocked() external returns (bool);\\n    function playoff() external returns (bool);\\n    function winBattle(address receiever, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xa21d08b1f5cfc7d7b66a41654e9d6e05a0fc0f5ab467f4c214bf758980942402\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260405180602001604052806000815250600590805190602001906200002b92919062000425565b506362d9f6cc600a553480156200004157600080fd5b5060405162005da038038062005da083398181016040528101906200006791906200053f565b6040518060400160405280600981526020017f47616d654974656d730000000000000000000000000000000000000000000000815250620000ae816200017360201b60201c565b50620000c46000801b336200018f60201b60201c565b620000f67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200018f60201b60201c565b620001287f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200018f60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600781905550600060088190555050620005d6565b80600490805190602001906200018b92919062000425565b5050565b620001a18282620001a560201b60201c565b5050565b620001bc8282620001ed60201b62001d611760201c565b620001e88160016000858152602001908152602001600020620002de60201b62001e411790919060201c565b505050565b620001ff82826200031660201b60201c565b620002da57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200027f6200038060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200030e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200038860201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b60006200039c83836200040260201b60201c565b620003f7578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003fc565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b8280546200043390620005a0565b90600052602060002090601f016020900481019282620004575760008555620004a3565b82601f106200047257805160ff1916838001178555620004a3565b82800160010185558215620004a3579182015b82811115620004a257825182559160200191906001019062000485565b5b509050620004b29190620004b6565b5090565b5b80821115620004d1576000816000905550600101620004b7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200050782620004da565b9050919050565b6200051981620004fa565b81146200052557600080fd5b50565b60008151905062000539816200050e565b92915050565b600060208284031215620005585762000557620004d5565b5b6000620005688482850162000528565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005b957607f821691505b60208210811415620005d057620005cf62000571565b5b50919050565b6080516157ae620005f2600039600061239601526157ae6000f3fe6080604052600436106101c15760003560e01c8063a217fddf116100f7578063ca15c87311610095578063e985e9c511610064578063e985e9c514610690578063f242432a146106cd578063fe9e1b53146106f6578063ff3c09e114610721576101c1565b8063ca15c873146105d6578063d539139314610613578063d547741f1461063e578063d812649d14610667576101c1565b8063ada015da116100d1578063ada015da1461053b578063b2c79c3714610566578063c268f9ba1461058f578063c594c916146105ab576101c1565b8063a217fddf146104bc578063a22cb465146104e7578063a4e2d63414610510576101c1565b80634d736655116101645780637856ac401161013e5780637856ac40146103da5780638119109e146104175780639010d07c1461044257806391d148541461047f576101c1565b80634d736655146103355780634e1273f41461037257806375b238fc146103af576101c1565b8063248a9ca3116101a0578063248a9ca31461027d5780632eb2c2d6146102ba5780632f2ff15d146102e357806336568abe1461030c576101c1565b8062fdd58e146101c657806301ffc9a7146102035780630e89341c14610240575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e8919061395c565b61074c565b6040516101fa91906139ab565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190613a1e565b610816565b6040516102379190613a66565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190613a81565b610828565b6040516102749190613b47565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190613b9f565b61090d565b6040516102b19190613bdb565b60405180910390f35b3480156102c657600080fd5b506102e160048036038101906102dc9190613df3565b61092c565b005b3480156102ef57600080fd5b5061030a60048036038101906103059190613ec2565b6109cd565b005b34801561031857600080fd5b50610333600480360381019061032e9190613ec2565b6109ee565b005b34801561034157600080fd5b5061035c60048036038101906103579190613f02565b610a71565b60405161036991906141ba565b60405180910390f35b34801561037e57600080fd5b506103996004803603810190610394919061429f565b610e01565b6040516103a69190614386565b60405180910390f35b3480156103bb57600080fd5b506103c4610f1a565b6040516103d19190613bdb565b60405180910390f35b3480156103e657600080fd5b5061040160048036038101906103fc9190613a81565b610f3e565b60405161040e919061444d565b60405180910390f35b34801561042357600080fd5b5061042c611228565b6040516104399190613a66565b60405180910390f35b34801561044e57600080fd5b506104696004803603810190610464919061446f565b6112e2565b60405161047691906144be565b60405180910390f35b34801561048b57600080fd5b506104a660048036038101906104a19190613ec2565b611311565b6040516104b39190613a66565b60405180910390f35b3480156104c857600080fd5b506104d161137b565b6040516104de9190613bdb565b60405180910390f35b3480156104f357600080fd5b5061050e60048036038101906105099190614505565b611382565b005b34801561051c57600080fd5b50610525611398565b6040516105329190613a66565b60405180910390f35b34801561054757600080fd5b506105506113a5565b60405161055d91906139ab565b60405180910390f35b34801561057257600080fd5b5061058d6004803603810190610588919061395c565b6113af565b005b6105a960048036038101906105a49190614583565b611530565b005b3480156105b757600080fd5b506105c061198b565b6040516105cd91906139ab565b60405180910390f35b3480156105e257600080fd5b506105fd60048036038101906105f89190613b9f565b611995565b60405161060a91906139ab565b60405180910390f35b34801561061f57600080fd5b506106286119b9565b6040516106359190613bdb565b60405180910390f35b34801561064a57600080fd5b5061066560048036038101906106609190613ec2565b6119dd565b005b34801561067357600080fd5b5061068e6004803603810190610689919061467d565b6119fe565b005b34801561069c57600080fd5b506106b760048036038101906106b291906147c7565b611bfe565b6040516106c49190613a66565b60405180910390f35b3480156106d957600080fd5b506106f460048036038101906106ef9190614807565b611c92565b005b34801561070257600080fd5b5061070b611d33565b60405161071891906139ab565b60405180910390f35b34801561072d57600080fd5b50610736611d3d565b6040516107439190613bdb565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490614910565b60405180910390fd5b6002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061082182611e71565b9050919050565b6060600060066000848152602001908152602001600020805461084a9061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546108769061495f565b80156108c35780601f10610898576101008083540402835291602001916108c3565b820191906000526020600020905b8154815290600101906020018083116108a657829003601f168201915b5050505050905060008151116108e1576108dc83611f53565b610905565b6005816040516020016108f5929190614a61565b6040516020818303038152906040525b915050919050565b6000806000838152602001908152602001600020600101549050919050565b610934611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061097a575061097985610974611fe7565b611bfe565b5b6109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090614af7565b60405180910390fd5b6109c68585858585611fef565b5050505050565b6109d68261090d565b6109df81612314565b6109e98383612328565b505050565b6109f6611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a90614b89565b60405180910390fd5b610a6d828261235c565b5050565b6060600060075467ffffffffffffffff811115610a9157610a90613bfb565b5b604051908082528060200260200182016040528015610aca57816020015b610ab761378b565b815260200190600190039081610aaf5790505b50905060005b8151811015610df7576001610ae5858361074c565b10610de457600960008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610b359061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b619061495f565b8015610bae5780601f10610b8357610100808354040283529160200191610bae565b820191906000526020600020905b815481529060010190602001808311610b9157829003601f168201915b50505050508152602001600282018054610bc79061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf39061495f565b8015610c405780601f10610c1557610100808354040283529160200191610c40565b820191906000526020600020905b815481529060010190602001808311610c2357829003601f168201915b50505050508152602001600382018054610c599061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c859061495f565b8015610cd25780601f10610ca757610100808354040283529160200191610cd2565b820191906000526020600020905b815481529060010190602001808311610cb557829003601f168201915b50505050508152602001600482018054610ceb9061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d179061495f565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610dbc57602002820191906000526020600020905b815481526020019060010190808311610da8575b505050505081525050828281518110610dd857610dd7614ba9565b5b60200260200101819052505b8080610def90614c07565b915050610ad0565b5080915050919050565b60608151835114610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e90614cc2565b60405180910390fd5b6000835167ffffffffffffffff811115610e6457610e63613bfb565b5b604051908082528060200260200182016040528015610e925781602001602082028036833780820191505090505b50905060005b8451811015610f0f57610edf858281518110610eb757610eb6614ba9565b5b6020026020010151858381518110610ed257610ed1614ba9565b5b602002602001015161074c565b828281518110610ef257610ef1614ba9565b5b60200260200101818152505080610f0890614c07565b9050610e98565b508091505092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610f4661378b565b600960008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610f919061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbd9061495f565b801561100a5780601f10610fdf5761010080835404028352916020019161100a565b820191906000526020600020905b815481529060010190602001808311610fed57829003601f168201915b505050505081526020016002820180546110239061495f565b80601f016020809104026020016040519081016040528092919081815260200182805461104f9061495f565b801561109c5780601f106110715761010080835404028352916020019161109c565b820191906000526020600020905b81548152906001019060200180831161107f57829003601f168201915b505050505081526020016003820180546110b59061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546110e19061495f565b801561112e5780601f106111035761010080835404028352916020019161112e565b820191906000526020600020905b81548152906001019060200180831161111157829003601f168201915b505050505081526020016004820180546111479061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546111739061495f565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561121857602002820191906000526020600020905b815481526020019060010190808311611204575b5050505050815250509050919050565b60006112547f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611311565b6040518060400160405280600d81526020017f4163636573732044656e69656400000000000000000000000000000000000000815250906112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190613b47565b60405180910390fd5b506101f46112dc60006103e8612390565b10905090565b6000611309826001600086815260200190815260200160002061245690919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61139461138d611fe7565b8383612470565b5050565b6000600a54421115905090565b6000600854905090565b6113d97f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611311565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114479190613b47565b60405180910390fd5b5061145b82826125dd565b60006009600083815260200190815260200160002060000160009054906101000a900460ff16905060018160ff161480611498575060028160ff16145b80156114ad57506114ac838260ff166125fd565b5b1561152b5760006114c96001836114c49190614ce2565b61267d565b90506114d584826125dd565b6001826114e29190614ce2565b60ff16818573ffffffffffffffffffffffffffffffffffffffff167ffa36168c733b4c601b17553edfb42b696a96fc35572f0eca85e7d3e24cc9560160405160405180910390a4505b505050565b61155a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633611311565b6040518060400160405280600d81526020017f4163636573732044656e69656400000000000000000000000000000000000000815250906115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c89190613b47565b60405180910390fd5b506115db816126c7565b6040518060400160405280600f81526020017f416c726561647920506c6179696e67000000000000000000000000000000000081525090611652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116499190613b47565b60405180910390fd5b506000604051806060016040528060008152602001600181526020016002815250905060006040518060600160405280600181526020016002815260200160038152509050600060405180606001604052806002815260200160038152602001600481525090506000604051806060016040528060008152602001600281526020016004815250905060006040518060600160405280600181526020016003815260200160048152509050600061170b60006004612390565b90506000604051806060016040528060008152602001600081526020016000815250905060008214156117815760005b600381101561177b576117658989836003811061175b5761175a614ba9565b5b60200201516125dd565b879150808061177390614c07565b91505061173b565b506118c9565b60018214156117d35760005b60038110156117cd576117b7898883600381106117ad576117ac614ba9565b5b60200201516125dd565b86915080806117c590614c07565b91505061178d565b506118c8565b60028214156118255760005b600381101561181f57611809898783600381106117ff576117fe614ba9565b5b60200201516125dd565b859150808061181790614c07565b9150506117df565b506118c7565b60038214156118775760005b60038110156118715761185b8986836003811061185157611850614ba9565b5b60200201516125dd565b849150808061186990614c07565b915050611831565b506118c6565b60048214156118c55760005b60038110156118c3576118ad898583600381106118a3576118a2614ba9565b5b60200201516125dd565b83915080806118bb90614c07565b915050611883565b505b5b5b5b5b600860008154809291906118dc90614c07565b91905055508773ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611927573d6000803e3d6000fd5b50806040516119369190614dc4565b60405180910390208873ffffffffffffffffffffffffffffffffffffffff167f03c6cf41c8b7617d28bfe0b9ff6437547ae24b192cae60ec45f63977ba9ca56760405160405180910390a35050505050505050565b6000600a54905090565b60006119b260016000848152602001908152602001600020612713565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6119e68261090d565b6119ef81612314565b6119f9838361235c565b505050565b611a287fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611311565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a969190613b47565b60405180910390fd5b506000600754905060006040518060c001604052808a60ff168152602001898152602001888152602001878152602001868152602001858152509050806009600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019080519060200190611b2c9291906137c4565b506040820151816002019080519060200190611b499291906137c4565b506060820151816003019080519060200190611b669291906137c4565b506080820151816004019080519060200190611b839291906137c4565b5060a0820151816005019080519060200190611ba092919061384a565b50905050611bae8284612728565b60076000815480929190611bc190614c07565b9190505550817f50bfe36855967d446b8ea65825360cacc53d0ec60543567ebfad26a51a2cfc4660405160405180910390a2505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c9a611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611ce05750611cdf85611cda611fe7565b611bfe565b5b611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1690614af7565b60405180910390fd5b611d2c8585858585612794565b5050505050565b6000600754905090565b7f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec81565b611d6b8282611311565b611e3d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611de2611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611e69836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612a33565b905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f3c57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f4c5750611f4b82612aa3565b5b9050919050565b606060048054611f629061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8e9061495f565b8015611fdb5780601f10611fb057610100808354040283529160200191611fdb565b820191906000526020600020905b815481529060010190602001808311611fbe57829003601f168201915b50505050509050919050565b600033905090565b8151835114612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90614e51565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209a90614ee3565b60405180910390fd5b60006120ad611fe7565b90506120bd818787878787612b1d565b60005b84518110156122715760008582815181106120de576120dd614ba9565b5b6020026020010151905060008583815181106120fd576120fc614ba9565b5b6020026020010151905060006002600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561219f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219690614f75565b60405180910390fd5b8181036002600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816002600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122569190614f95565b925050819055505050508061226a90614c07565b90506120c0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e8929190614feb565b60405180910390a46122fe818787878787612b25565b61230c818787878787612b2d565b505050505050565b61232581612320611fe7565b612d14565b50565b6123328282611d61565b6123578160016000858152602001908152602001600020611e4190919063ffffffff16565b505050565b6123668282612db1565b61238b8160016000858152602001908152602001600020612e9290919063ffffffff16565b505050565b600080827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aacc5a176040518163ffffffff1660e01b815260040160206040518083038186803b1580156123fa57600080fd5b505afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190615037565b60001c61243f9190615093565b8461244a9190614f95565b90508091505092915050565b60006124658360000183612ec2565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d690615136565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125d09190613a66565b60405180910390a3505050565b6125f98282600160405180602001604052806000815250612eed565b5050565b6000806001831461260f576005612612565b60005b60ff16905060006001841461262857600961262b565b60055b60ff16905060008290505b8181101561266f57600061264a878361074c565b141561265c5760009350505050612677565b808061266790614c07565b915050612636565b506001925050505b92915050565b600060028260ff16141561269e5761269760056003612390565b90506126c2565b60038260ff1614156126bd576126b660096002612390565b90506126c2565b600090505b919050565b600080600090505b6007548110156127085760006126e5848361074c565b11156126f557600091505061270e565b808061270090614c07565b9150506126cf565b50600190505b919050565b60006127218260000161309f565b9050919050565b8060066000848152602001908152602001600020908051906020019061274f9291906137c4565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61277b84610828565b6040516127889190613b47565b60405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fb90614ee3565b60405180910390fd5b600061280e611fe7565b9050600061281b856130b0565b90506000612828856130b0565b9050612838838989858589612b1d565b60006002600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156128d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c790614f75565b60405180910390fd5b8581036002600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856002600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129879190614f95565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612a04929190615156565b60405180910390a4612a1a848a8a86868a612b25565b612a28848a8a8a8a8a61312a565b505050505050505050565b6000612a3f8383613311565b612a98578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612a9d565b600090505b92915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612b165750612b1582613334565b5b9050919050565b505050505050565b505050505050565b612b4c8473ffffffffffffffffffffffffffffffffffffffff166133ae565b15612d0c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612b929594939291906151d4565b602060405180830381600087803b158015612bac57600080fd5b505af1925050508015612bdd57506040513d601f19601f82011682018060405250810190612bda9190615251565b60015b612c8357612be961528b565b806308c379a01415612c465750612bfe6152ad565b80612c095750612c48565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3d9190613b47565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7a906153b5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0190615447565b60405180910390fd5b505b505050505050565b612d1e8282611311565b612dad57612d438173ffffffffffffffffffffffffffffffffffffffff1660146133d1565b612d518360001c60206133d1565b604051602001612d629291906154ff565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da49190613b47565b60405180910390fd5b5050565b612dbb8282611311565b15612e8e57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e33611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612eba836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61360d565b905092915050565b6000826000018281548110612eda57612ed9614ba9565b5b9060005260206000200154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f54906155ab565b60405180910390fd5b6000612f67611fe7565b90506000612f74856130b0565b90506000612f81856130b0565b9050612f9283600089858589612b1d565b846002600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ff29190614f95565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051613070929190615156565b60405180910390a461308783600089858589612b25565b6130968360008989898961312a565b50505050505050565b600081600001805490509050919050565b60606000600167ffffffffffffffff8111156130cf576130ce613bfb565b5b6040519080825280602002602001820160405280156130fd5781602001602082028036833780820191505090505b509050828160008151811061311557613114614ba9565b5b60200260200101818152505080915050919050565b6131498473ffffffffffffffffffffffffffffffffffffffff166133ae565b15613309578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161318f9594939291906155cb565b602060405180830381600087803b1580156131a957600080fd5b505af19250505080156131da57506040513d601f19601f820116820180604052508101906131d79190615251565b60015b613280576131e661528b565b806308c379a0141561324357506131fb6152ad565b806132065750613245565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323a9190613b47565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613277906153b5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132fe90615447565b60405180910390fd5b505b505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806133a757506133a682613721565b5b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060028360026133e49190615625565b6133ee9190614f95565b67ffffffffffffffff81111561340757613406613bfb565b5b6040519080825280601f01601f1916602001820160405280156134395781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061347157613470614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106134d5576134d4614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026135159190615625565b61351f9190614f95565b90505b60018111156135bf577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061356157613560614ba9565b5b1a60f81b82828151811061357857613577614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806135b89061567f565b9050613522565b5060008414613603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fa906156f5565b60405180910390fd5b8091505092915050565b6000808360010160008481526020019081526020016000205490506000811461371557600060018261363f9190615715565b90506000600186600001805490506136579190615715565b90508181146136c657600086600001828154811061367857613677614ba9565b5b906000526020600020015490508087600001848154811061369c5761369b614ba9565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806136da576136d9615749565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061371b565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6040518060c00160405280600060ff16815260200160608152602001606081526020016060815260200160608152602001606081525090565b8280546137d09061495f565b90600052602060002090601f0160209004810192826137f25760008555613839565b82601f1061380b57805160ff1916838001178555613839565b82800160010185558215613839579182015b8281111561383857825182559160200191906001019061381d565b5b5090506138469190613897565b5090565b828054828255906000526020600020908101928215613886579160200282015b8281111561388557825182559160200191906001019061386a565b5b5090506138939190613897565b5090565b5b808211156138b0576000816000905550600101613898565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138f3826138c8565b9050919050565b613903816138e8565b811461390e57600080fd5b50565b600081359050613920816138fa565b92915050565b6000819050919050565b61393981613926565b811461394457600080fd5b50565b60008135905061395681613930565b92915050565b60008060408385031215613973576139726138be565b5b600061398185828601613911565b925050602061399285828601613947565b9150509250929050565b6139a581613926565b82525050565b60006020820190506139c0600083018461399c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6139fb816139c6565b8114613a0657600080fd5b50565b600081359050613a18816139f2565b92915050565b600060208284031215613a3457613a336138be565b5b6000613a4284828501613a09565b91505092915050565b60008115159050919050565b613a6081613a4b565b82525050565b6000602082019050613a7b6000830184613a57565b92915050565b600060208284031215613a9757613a966138be565b5b6000613aa584828501613947565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ae8578082015181840152602081019050613acd565b83811115613af7576000848401525b50505050565b6000601f19601f8301169050919050565b6000613b1982613aae565b613b238185613ab9565b9350613b33818560208601613aca565b613b3c81613afd565b840191505092915050565b60006020820190508181036000830152613b618184613b0e565b905092915050565b6000819050919050565b613b7c81613b69565b8114613b8757600080fd5b50565b600081359050613b9981613b73565b92915050565b600060208284031215613bb557613bb46138be565b5b6000613bc384828501613b8a565b91505092915050565b613bd581613b69565b82525050565b6000602082019050613bf06000830184613bcc565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c3382613afd565b810181811067ffffffffffffffff82111715613c5257613c51613bfb565b5b80604052505050565b6000613c656138b4565b9050613c718282613c2a565b919050565b600067ffffffffffffffff821115613c9157613c90613bfb565b5b602082029050602081019050919050565b600080fd5b6000613cba613cb584613c76565b613c5b565b90508083825260208201905060208402830185811115613cdd57613cdc613ca2565b5b835b81811015613d065780613cf28882613947565b845260208401935050602081019050613cdf565b5050509392505050565b600082601f830112613d2557613d24613bf6565b5b8135613d35848260208601613ca7565b91505092915050565b600080fd5b600067ffffffffffffffff821115613d5e57613d5d613bfb565b5b613d6782613afd565b9050602081019050919050565b82818337600083830152505050565b6000613d96613d9184613d43565b613c5b565b905082815260208101848484011115613db257613db1613d3e565b5b613dbd848285613d74565b509392505050565b600082601f830112613dda57613dd9613bf6565b5b8135613dea848260208601613d83565b91505092915050565b600080600080600060a08688031215613e0f57613e0e6138be565b5b6000613e1d88828901613911565b9550506020613e2e88828901613911565b945050604086013567ffffffffffffffff811115613e4f57613e4e6138c3565b5b613e5b88828901613d10565b935050606086013567ffffffffffffffff811115613e7c57613e7b6138c3565b5b613e8888828901613d10565b925050608086013567ffffffffffffffff811115613ea957613ea86138c3565b5b613eb588828901613dc5565b9150509295509295909350565b60008060408385031215613ed957613ed86138be565b5b6000613ee785828601613b8a565b9250506020613ef885828601613911565b9150509250929050565b600060208284031215613f1857613f176138be565b5b6000613f2684828501613911565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b613f7181613f5b565b82525050565b600082825260208201905092915050565b6000613f9382613aae565b613f9d8185613f77565b9350613fad818560208601613aca565b613fb681613afd565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ff681613926565b82525050565b60006140088383613fed565b60208301905092915050565b6000602082019050919050565b600061402c82613fc1565b6140368185613fcc565b935061404183613fdd565b8060005b838110156140725781516140598882613ffc565b975061406483614014565b925050600181019050614045565b5085935050505092915050565b600060c0830160008301516140976000860182613f68565b50602083015184820360208601526140af8282613f88565b915050604083015184820360408601526140c98282613f88565b915050606083015184820360608601526140e38282613f88565b915050608083015184820360808601526140fd8282613f88565b91505060a083015184820360a08601526141178282614021565b9150508091505092915050565b6000614130838361407f565b905092915050565b6000602082019050919050565b600061415082613f2f565b61415a8185613f3a565b93508360208202850161416c85613f4b565b8060005b858110156141a857848403895281516141898582614124565b945061419483614138565b925060208a01995050600181019050614170565b50829750879550505050505092915050565b600060208201905081810360008301526141d48184614145565b905092915050565b600067ffffffffffffffff8211156141f7576141f6613bfb565b5b602082029050602081019050919050565b600061421b614216846141dc565b613c5b565b9050808382526020820190506020840283018581111561423e5761423d613ca2565b5b835b8181101561426757806142538882613911565b845260208401935050602081019050614240565b5050509392505050565b600082601f83011261428657614285613bf6565b5b8135614296848260208601614208565b91505092915050565b600080604083850312156142b6576142b56138be565b5b600083013567ffffffffffffffff8111156142d4576142d36138c3565b5b6142e085828601614271565b925050602083013567ffffffffffffffff811115614301576143006138c3565b5b61430d85828601613d10565b9150509250929050565b600082825260208201905092915050565b600061433382613fc1565b61433d8185614317565b935061434883613fdd565b8060005b838110156143795781516143608882613ffc565b975061436b83614014565b92505060018101905061434c565b5085935050505092915050565b600060208201905081810360008301526143a08184614328565b905092915050565b600060c0830160008301516143c06000860182613f68565b50602083015184820360208601526143d88282613f88565b915050604083015184820360408601526143f28282613f88565b9150506060830151848203606086015261440c8282613f88565b915050608083015184820360808601526144268282613f88565b91505060a083015184820360a08601526144408282614021565b9150508091505092915050565b6000602082019050818103600083015261446781846143a8565b905092915050565b60008060408385031215614486576144856138be565b5b600061449485828601613b8a565b92505060206144a585828601613947565b9150509250929050565b6144b8816138e8565b82525050565b60006020820190506144d360008301846144af565b92915050565b6144e281613a4b565b81146144ed57600080fd5b50565b6000813590506144ff816144d9565b92915050565b6000806040838503121561451c5761451b6138be565b5b600061452a85828601613911565b925050602061453b858286016144f0565b9150509250929050565b6000614550826138c8565b9050919050565b61456081614545565b811461456b57600080fd5b50565b60008135905061457d81614557565b92915050565b600060208284031215614599576145986138be565b5b60006145a78482850161456e565b91505092915050565b6145b981613f5b565b81146145c457600080fd5b50565b6000813590506145d6816145b0565b92915050565b600067ffffffffffffffff8211156145f7576145f6613bfb565b5b61460082613afd565b9050602081019050919050565b600061462061461b846145dc565b613c5b565b90508281526020810184848401111561463c5761463b613d3e565b5b614647848285613d74565b509392505050565b600082601f83011261466457614663613bf6565b5b813561467484826020860161460d565b91505092915050565b600080600080600080600060e0888a03121561469c5761469b6138be565b5b60006146aa8a828b016145c7565b975050602088013567ffffffffffffffff8111156146cb576146ca6138c3565b5b6146d78a828b0161464f565b965050604088013567ffffffffffffffff8111156146f8576146f76138c3565b5b6147048a828b0161464f565b955050606088013567ffffffffffffffff811115614725576147246138c3565b5b6147318a828b0161464f565b945050608088013567ffffffffffffffff811115614752576147516138c3565b5b61475e8a828b0161464f565b93505060a088013567ffffffffffffffff81111561477f5761477e6138c3565b5b61478b8a828b01613d10565b92505060c088013567ffffffffffffffff8111156147ac576147ab6138c3565b5b6147b88a828b0161464f565b91505092959891949750929550565b600080604083850312156147de576147dd6138be565b5b60006147ec85828601613911565b92505060206147fd85828601613911565b9150509250929050565b600080600080600060a08688031215614823576148226138be565b5b600061483188828901613911565b955050602061484288828901613911565b945050604061485388828901613947565b935050606061486488828901613947565b925050608086013567ffffffffffffffff811115614885576148846138c3565b5b61489188828901613dc5565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006148fa602a83613ab9565b91506149058261489e565b604082019050919050565b60006020820190508181036000830152614929816148ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061497757607f821691505b6020821081141561498b5761498a614930565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546149be8161495f565b6149c88186614991565b945060018216600081146149e357600181146149f457614a27565b60ff19831686528186019350614a27565b6149fd8561499c565b60005b83811015614a1f57815481890152600182019150602081019050614a00565b838801955050505b50505092915050565b6000614a3b82613aae565b614a458185614991565b9350614a55818560208601613aca565b80840191505092915050565b6000614a6d82856149b1565b9150614a798284614a30565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000614ae1602f83613ab9565b9150614aec82614a85565b604082019050919050565b60006020820190508181036000830152614b1081614ad4565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614b73602f83613ab9565b9150614b7e82614b17565b604082019050919050565b60006020820190508181036000830152614ba281614b66565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614c1282613926565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c4557614c44614bd8565b5b600182019050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614cac602983613ab9565b9150614cb782614c50565b604082019050919050565b60006020820190508181036000830152614cdb81614c9f565b9050919050565b6000614ced82613f5b565b9150614cf883613f5b565b92508260ff03821115614d0e57614d0d614bd8565b5b828201905092915050565b600060039050919050565b600081905092915050565b6000819050919050565b614d4281613926565b82525050565b6000614d548383614d39565b60208301905092915050565b6000602082019050919050565b614d7681614d19565b614d808184614d24565b9250614d8b82614d2f565b8060005b83811015614dbc578151614da38782614d48565b9650614dae83614d60565b925050600181019050614d8f565b505050505050565b6000614dd08284614d6d565b60608201915081905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614e3b602883613ab9565b9150614e4682614ddf565b604082019050919050565b60006020820190508181036000830152614e6a81614e2e565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614ecd602583613ab9565b9150614ed882614e71565b604082019050919050565b60006020820190508181036000830152614efc81614ec0565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614f5f602a83613ab9565b9150614f6a82614f03565b604082019050919050565b60006020820190508181036000830152614f8e81614f52565b9050919050565b6000614fa082613926565b9150614fab83613926565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614fe057614fdf614bd8565b5b828201905092915050565b600060408201905081810360008301526150058185614328565b905081810360208301526150198184614328565b90509392505050565b60008151905061503181613b73565b92915050565b60006020828403121561504d5761504c6138be565b5b600061505b84828501615022565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061509e82613926565b91506150a983613926565b9250826150b9576150b8615064565b5b828206905092915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615120602983613ab9565b915061512b826150c4565b604082019050919050565b6000602082019050818103600083015261514f81615113565b9050919050565b600060408201905061516b600083018561399c565b615178602083018461399c565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006151a68261517f565b6151b0818561518a565b93506151c0818560208601613aca565b6151c981613afd565b840191505092915050565b600060a0820190506151e960008301886144af565b6151f660208301876144af565b81810360408301526152088186614328565b9050818103606083015261521c8185614328565b90508181036080830152615230818461519b565b90509695505050505050565b60008151905061524b816139f2565b92915050565b600060208284031215615267576152666138be565b5b60006152758482850161523c565b91505092915050565b60008160e01c9050919050565b600060033d11156152aa5760046000803e6152a760005161527e565b90505b90565b600060443d10156152bd57615340565b6152c56138b4565b60043d036004823e80513d602482011167ffffffffffffffff821117156152ed575050615340565b808201805167ffffffffffffffff81111561530b5750505050615340565b80602083010160043d038501811115615328575050505050615340565b61533782602001850186613c2a565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061539f603483613ab9565b91506153aa82615343565b604082019050919050565b600060208201905081810360008301526153ce81615392565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615431602883613ab9565b915061543c826153d5565b604082019050919050565b6000602082019050818103600083015261546081615424565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061549d601783614991565b91506154a882615467565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006154e9601183614991565b91506154f4826154b3565b601182019050919050565b600061550a82615490565b91506155168285614a30565b9150615521826154dc565b915061552d8284614a30565b91508190509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615595602183613ab9565b91506155a082615539565b604082019050919050565b600060208201905081810360008301526155c481615588565b9050919050565b600060a0820190506155e060008301886144af565b6155ed60208301876144af565b6155fa604083018661399c565b615607606083018561399c565b8181036080830152615619818461519b565b90509695505050505050565b600061563082613926565b915061563b83613926565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561567457615673614bd8565b5b828202905092915050565b600061568a82613926565b9150600082141561569e5761569d614bd8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006156df602083613ab9565b91506156ea826156a9565b602082019050919050565b6000602082019050818103600083015261570e816156d2565b9050919050565b600061572082613926565b915061572b83613926565b92508282101561573e5761573d614bd8565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220206790ffdaa7eed1ba26cf0fb284a6bfeb8614b76a06cb2f870f9ae2d3e8928664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101c15760003560e01c8063a217fddf116100f7578063ca15c87311610095578063e985e9c511610064578063e985e9c514610690578063f242432a146106cd578063fe9e1b53146106f6578063ff3c09e114610721576101c1565b8063ca15c873146105d6578063d539139314610613578063d547741f1461063e578063d812649d14610667576101c1565b8063ada015da116100d1578063ada015da1461053b578063b2c79c3714610566578063c268f9ba1461058f578063c594c916146105ab576101c1565b8063a217fddf146104bc578063a22cb465146104e7578063a4e2d63414610510576101c1565b80634d736655116101645780637856ac401161013e5780637856ac40146103da5780638119109e146104175780639010d07c1461044257806391d148541461047f576101c1565b80634d736655146103355780634e1273f41461037257806375b238fc146103af576101c1565b8063248a9ca3116101a0578063248a9ca31461027d5780632eb2c2d6146102ba5780632f2ff15d146102e357806336568abe1461030c576101c1565b8062fdd58e146101c657806301ffc9a7146102035780630e89341c14610240575b600080fd5b3480156101d257600080fd5b506101ed60048036038101906101e8919061395c565b61074c565b6040516101fa91906139ab565b60405180910390f35b34801561020f57600080fd5b5061022a60048036038101906102259190613a1e565b610816565b6040516102379190613a66565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190613a81565b610828565b6040516102749190613b47565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190613b9f565b61090d565b6040516102b19190613bdb565b60405180910390f35b3480156102c657600080fd5b506102e160048036038101906102dc9190613df3565b61092c565b005b3480156102ef57600080fd5b5061030a60048036038101906103059190613ec2565b6109cd565b005b34801561031857600080fd5b50610333600480360381019061032e9190613ec2565b6109ee565b005b34801561034157600080fd5b5061035c60048036038101906103579190613f02565b610a71565b60405161036991906141ba565b60405180910390f35b34801561037e57600080fd5b506103996004803603810190610394919061429f565b610e01565b6040516103a69190614386565b60405180910390f35b3480156103bb57600080fd5b506103c4610f1a565b6040516103d19190613bdb565b60405180910390f35b3480156103e657600080fd5b5061040160048036038101906103fc9190613a81565b610f3e565b60405161040e919061444d565b60405180910390f35b34801561042357600080fd5b5061042c611228565b6040516104399190613a66565b60405180910390f35b34801561044e57600080fd5b506104696004803603810190610464919061446f565b6112e2565b60405161047691906144be565b60405180910390f35b34801561048b57600080fd5b506104a660048036038101906104a19190613ec2565b611311565b6040516104b39190613a66565b60405180910390f35b3480156104c857600080fd5b506104d161137b565b6040516104de9190613bdb565b60405180910390f35b3480156104f357600080fd5b5061050e60048036038101906105099190614505565b611382565b005b34801561051c57600080fd5b50610525611398565b6040516105329190613a66565b60405180910390f35b34801561054757600080fd5b506105506113a5565b60405161055d91906139ab565b60405180910390f35b34801561057257600080fd5b5061058d6004803603810190610588919061395c565b6113af565b005b6105a960048036038101906105a49190614583565b611530565b005b3480156105b757600080fd5b506105c061198b565b6040516105cd91906139ab565b60405180910390f35b3480156105e257600080fd5b506105fd60048036038101906105f89190613b9f565b611995565b60405161060a91906139ab565b60405180910390f35b34801561061f57600080fd5b506106286119b9565b6040516106359190613bdb565b60405180910390f35b34801561064a57600080fd5b5061066560048036038101906106609190613ec2565b6119dd565b005b34801561067357600080fd5b5061068e6004803603810190610689919061467d565b6119fe565b005b34801561069c57600080fd5b506106b760048036038101906106b291906147c7565b611bfe565b6040516106c49190613a66565b60405180910390f35b3480156106d957600080fd5b506106f460048036038101906106ef9190614807565b611c92565b005b34801561070257600080fd5b5061070b611d33565b60405161071891906139ab565b60405180910390f35b34801561072d57600080fd5b50610736611d3d565b6040516107439190613bdb565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490614910565b60405180910390fd5b6002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061082182611e71565b9050919050565b6060600060066000848152602001908152602001600020805461084a9061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546108769061495f565b80156108c35780601f10610898576101008083540402835291602001916108c3565b820191906000526020600020905b8154815290600101906020018083116108a657829003601f168201915b5050505050905060008151116108e1576108dc83611f53565b610905565b6005816040516020016108f5929190614a61565b6040516020818303038152906040525b915050919050565b6000806000838152602001908152602001600020600101549050919050565b610934611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061097a575061097985610974611fe7565b611bfe565b5b6109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090614af7565b60405180910390fd5b6109c68585858585611fef565b5050505050565b6109d68261090d565b6109df81612314565b6109e98383612328565b505050565b6109f6611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a90614b89565b60405180910390fd5b610a6d828261235c565b5050565b6060600060075467ffffffffffffffff811115610a9157610a90613bfb565b5b604051908082528060200260200182016040528015610aca57816020015b610ab761378b565b815260200190600190039081610aaf5790505b50905060005b8151811015610df7576001610ae5858361074c565b10610de457600960008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610b359061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b619061495f565b8015610bae5780601f10610b8357610100808354040283529160200191610bae565b820191906000526020600020905b815481529060010190602001808311610b9157829003601f168201915b50505050508152602001600282018054610bc79061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf39061495f565b8015610c405780601f10610c1557610100808354040283529160200191610c40565b820191906000526020600020905b815481529060010190602001808311610c2357829003601f168201915b50505050508152602001600382018054610c599061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c859061495f565b8015610cd25780601f10610ca757610100808354040283529160200191610cd2565b820191906000526020600020905b815481529060010190602001808311610cb557829003601f168201915b50505050508152602001600482018054610ceb9061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d179061495f565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610dbc57602002820191906000526020600020905b815481526020019060010190808311610da8575b505050505081525050828281518110610dd857610dd7614ba9565b5b60200260200101819052505b8080610def90614c07565b915050610ad0565b5080915050919050565b60608151835114610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e90614cc2565b60405180910390fd5b6000835167ffffffffffffffff811115610e6457610e63613bfb565b5b604051908082528060200260200182016040528015610e925781602001602082028036833780820191505090505b50905060005b8451811015610f0f57610edf858281518110610eb757610eb6614ba9565b5b6020026020010151858381518110610ed257610ed1614ba9565b5b602002602001015161074c565b828281518110610ef257610ef1614ba9565b5b60200260200101818152505080610f0890614c07565b9050610e98565b508091505092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610f4661378b565b600960008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610f919061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbd9061495f565b801561100a5780601f10610fdf5761010080835404028352916020019161100a565b820191906000526020600020905b815481529060010190602001808311610fed57829003601f168201915b505050505081526020016002820180546110239061495f565b80601f016020809104026020016040519081016040528092919081815260200182805461104f9061495f565b801561109c5780601f106110715761010080835404028352916020019161109c565b820191906000526020600020905b81548152906001019060200180831161107f57829003601f168201915b505050505081526020016003820180546110b59061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546110e19061495f565b801561112e5780601f106111035761010080835404028352916020019161112e565b820191906000526020600020905b81548152906001019060200180831161111157829003601f168201915b505050505081526020016004820180546111479061495f565b80601f01602080910402602001604051908101604052809291908181526020018280546111739061495f565b80156111c05780601f10611195576101008083540402835291602001916111c0565b820191906000526020600020905b8154815290600101906020018083116111a357829003601f168201915b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561121857602002820191906000526020600020905b815481526020019060010190808311611204575b5050505050815250509050919050565b60006112547f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611311565b6040518060400160405280600d81526020017f4163636573732044656e69656400000000000000000000000000000000000000815250906112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190613b47565b60405180910390fd5b506101f46112dc60006103e8612390565b10905090565b6000611309826001600086815260200190815260200160002061245690919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61139461138d611fe7565b8383612470565b5050565b6000600a54421115905090565b6000600854905090565b6113d97f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611311565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114479190613b47565b60405180910390fd5b5061145b82826125dd565b60006009600083815260200190815260200160002060000160009054906101000a900460ff16905060018160ff161480611498575060028160ff16145b80156114ad57506114ac838260ff166125fd565b5b1561152b5760006114c96001836114c49190614ce2565b61267d565b90506114d584826125dd565b6001826114e29190614ce2565b60ff16818573ffffffffffffffffffffffffffffffffffffffff167ffa36168c733b4c601b17553edfb42b696a96fc35572f0eca85e7d3e24cc9560160405160405180910390a4505b505050565b61155a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633611311565b6040518060400160405280600d81526020017f4163636573732044656e69656400000000000000000000000000000000000000815250906115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c89190613b47565b60405180910390fd5b506115db816126c7565b6040518060400160405280600f81526020017f416c726561647920506c6179696e67000000000000000000000000000000000081525090611652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116499190613b47565b60405180910390fd5b506000604051806060016040528060008152602001600181526020016002815250905060006040518060600160405280600181526020016002815260200160038152509050600060405180606001604052806002815260200160038152602001600481525090506000604051806060016040528060008152602001600281526020016004815250905060006040518060600160405280600181526020016003815260200160048152509050600061170b60006004612390565b90506000604051806060016040528060008152602001600081526020016000815250905060008214156117815760005b600381101561177b576117658989836003811061175b5761175a614ba9565b5b60200201516125dd565b879150808061177390614c07565b91505061173b565b506118c9565b60018214156117d35760005b60038110156117cd576117b7898883600381106117ad576117ac614ba9565b5b60200201516125dd565b86915080806117c590614c07565b91505061178d565b506118c8565b60028214156118255760005b600381101561181f57611809898783600381106117ff576117fe614ba9565b5b60200201516125dd565b859150808061181790614c07565b9150506117df565b506118c7565b60038214156118775760005b60038110156118715761185b8986836003811061185157611850614ba9565b5b60200201516125dd565b849150808061186990614c07565b915050611831565b506118c6565b60048214156118c55760005b60038110156118c3576118ad898583600381106118a3576118a2614ba9565b5b60200201516125dd565b83915080806118bb90614c07565b915050611883565b505b5b5b5b5b600860008154809291906118dc90614c07565b91905055508773ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611927573d6000803e3d6000fd5b50806040516119369190614dc4565b60405180910390208873ffffffffffffffffffffffffffffffffffffffff167f03c6cf41c8b7617d28bfe0b9ff6437547ae24b192cae60ec45f63977ba9ca56760405160405180910390a35050505050505050565b6000600a54905090565b60006119b260016000848152602001908152602001600020612713565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6119e68261090d565b6119ef81612314565b6119f9838361235c565b505050565b611a287fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611311565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a969190613b47565b60405180910390fd5b506000600754905060006040518060c001604052808a60ff168152602001898152602001888152602001878152602001868152602001858152509050806009600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019080519060200190611b2c9291906137c4565b506040820151816002019080519060200190611b499291906137c4565b506060820151816003019080519060200190611b669291906137c4565b506080820151816004019080519060200190611b839291906137c4565b5060a0820151816005019080519060200190611ba092919061384a565b50905050611bae8284612728565b60076000815480929190611bc190614c07565b9190505550817f50bfe36855967d446b8ea65825360cacc53d0ec60543567ebfad26a51a2cfc4660405160405180910390a2505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c9a611fe7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611ce05750611cdf85611cda611fe7565b611bfe565b5b611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1690614af7565b60405180910390fd5b611d2c8585858585612794565b5050505050565b6000600754905090565b7f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec81565b611d6b8282611311565b611e3d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611de2611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611e69836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612a33565b905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f3c57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f4c5750611f4b82612aa3565b5b9050919050565b606060048054611f629061495f565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8e9061495f565b8015611fdb5780601f10611fb057610100808354040283529160200191611fdb565b820191906000526020600020905b815481529060010190602001808311611fbe57829003601f168201915b50505050509050919050565b600033905090565b8151835114612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90614e51565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156120a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209a90614ee3565b60405180910390fd5b60006120ad611fe7565b90506120bd818787878787612b1d565b60005b84518110156122715760008582815181106120de576120dd614ba9565b5b6020026020010151905060008583815181106120fd576120fc614ba9565b5b6020026020010151905060006002600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561219f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219690614f75565b60405180910390fd5b8181036002600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816002600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122569190614f95565b925050819055505050508061226a90614c07565b90506120c0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e8929190614feb565b60405180910390a46122fe818787878787612b25565b61230c818787878787612b2d565b505050505050565b61232581612320611fe7565b612d14565b50565b6123328282611d61565b6123578160016000858152602001908152602001600020611e4190919063ffffffff16565b505050565b6123668282612db1565b61238b8160016000858152602001908152602001600020612e9290919063ffffffff16565b505050565b600080827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aacc5a176040518163ffffffff1660e01b815260040160206040518083038186803b1580156123fa57600080fd5b505afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190615037565b60001c61243f9190615093565b8461244a9190614f95565b90508091505092915050565b60006124658360000183612ec2565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d690615136565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125d09190613a66565b60405180910390a3505050565b6125f98282600160405180602001604052806000815250612eed565b5050565b6000806001831461260f576005612612565b60005b60ff16905060006001841461262857600961262b565b60055b60ff16905060008290505b8181101561266f57600061264a878361074c565b141561265c5760009350505050612677565b808061266790614c07565b915050612636565b506001925050505b92915050565b600060028260ff16141561269e5761269760056003612390565b90506126c2565b60038260ff1614156126bd576126b660096002612390565b90506126c2565b600090505b919050565b600080600090505b6007548110156127085760006126e5848361074c565b11156126f557600091505061270e565b808061270090614c07565b9150506126cf565b50600190505b919050565b60006127218260000161309f565b9050919050565b8060066000848152602001908152602001600020908051906020019061274f9291906137c4565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61277b84610828565b6040516127889190613b47565b60405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fb90614ee3565b60405180910390fd5b600061280e611fe7565b9050600061281b856130b0565b90506000612828856130b0565b9050612838838989858589612b1d565b60006002600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156128d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c790614f75565b60405180910390fd5b8581036002600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856002600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129879190614f95565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612a04929190615156565b60405180910390a4612a1a848a8a86868a612b25565b612a28848a8a8a8a8a61312a565b505050505050505050565b6000612a3f8383613311565b612a98578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612a9d565b600090505b92915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612b165750612b1582613334565b5b9050919050565b505050505050565b505050505050565b612b4c8473ffffffffffffffffffffffffffffffffffffffff166133ae565b15612d0c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612b929594939291906151d4565b602060405180830381600087803b158015612bac57600080fd5b505af1925050508015612bdd57506040513d601f19601f82011682018060405250810190612bda9190615251565b60015b612c8357612be961528b565b806308c379a01415612c465750612bfe6152ad565b80612c095750612c48565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3d9190613b47565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7a906153b5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0190615447565b60405180910390fd5b505b505050505050565b612d1e8282611311565b612dad57612d438173ffffffffffffffffffffffffffffffffffffffff1660146133d1565b612d518360001c60206133d1565b604051602001612d629291906154ff565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da49190613b47565b60405180910390fd5b5050565b612dbb8282611311565b15612e8e57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e33611fe7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612eba836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61360d565b905092915050565b6000826000018281548110612eda57612ed9614ba9565b5b9060005260206000200154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f54906155ab565b60405180910390fd5b6000612f67611fe7565b90506000612f74856130b0565b90506000612f81856130b0565b9050612f9283600089858589612b1d565b846002600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ff29190614f95565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051613070929190615156565b60405180910390a461308783600089858589612b25565b6130968360008989898961312a565b50505050505050565b600081600001805490509050919050565b60606000600167ffffffffffffffff8111156130cf576130ce613bfb565b5b6040519080825280602002602001820160405280156130fd5781602001602082028036833780820191505090505b509050828160008151811061311557613114614ba9565b5b60200260200101818152505080915050919050565b6131498473ffffffffffffffffffffffffffffffffffffffff166133ae565b15613309578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161318f9594939291906155cb565b602060405180830381600087803b1580156131a957600080fd5b505af19250505080156131da57506040513d601f19601f820116820180604052508101906131d79190615251565b60015b613280576131e661528b565b806308c379a0141561324357506131fb6152ad565b806132065750613245565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323a9190613b47565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613277906153b5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132fe90615447565b60405180910390fd5b505b505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806133a757506133a682613721565b5b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060028360026133e49190615625565b6133ee9190614f95565b67ffffffffffffffff81111561340757613406613bfb565b5b6040519080825280601f01601f1916602001820160405280156134395781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061347157613470614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106134d5576134d4614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026135159190615625565b61351f9190614f95565b90505b60018111156135bf577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061356157613560614ba9565b5b1a60f81b82828151811061357857613577614ba9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806135b89061567f565b9050613522565b5060008414613603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fa906156f5565b60405180910390fd5b8091505092915050565b6000808360010160008481526020019081526020016000205490506000811461371557600060018261363f9190615715565b90506000600186600001805490506136579190615715565b90508181146136c657600086600001828154811061367857613677614ba9565b5b906000526020600020015490508087600001848154811061369c5761369b614ba9565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806136da576136d9615749565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061371b565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6040518060c00160405280600060ff16815260200160608152602001606081526020016060815260200160608152602001606081525090565b8280546137d09061495f565b90600052602060002090601f0160209004810192826137f25760008555613839565b82601f1061380b57805160ff1916838001178555613839565b82800160010185558215613839579182015b8281111561383857825182559160200191906001019061381d565b5b5090506138469190613897565b5090565b828054828255906000526020600020908101928215613886579160200282015b8281111561388557825182559160200191906001019061386a565b5b5090506138939190613897565b5090565b5b808211156138b0576000816000905550600101613898565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138f3826138c8565b9050919050565b613903816138e8565b811461390e57600080fd5b50565b600081359050613920816138fa565b92915050565b6000819050919050565b61393981613926565b811461394457600080fd5b50565b60008135905061395681613930565b92915050565b60008060408385031215613973576139726138be565b5b600061398185828601613911565b925050602061399285828601613947565b9150509250929050565b6139a581613926565b82525050565b60006020820190506139c0600083018461399c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6139fb816139c6565b8114613a0657600080fd5b50565b600081359050613a18816139f2565b92915050565b600060208284031215613a3457613a336138be565b5b6000613a4284828501613a09565b91505092915050565b60008115159050919050565b613a6081613a4b565b82525050565b6000602082019050613a7b6000830184613a57565b92915050565b600060208284031215613a9757613a966138be565b5b6000613aa584828501613947565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ae8578082015181840152602081019050613acd565b83811115613af7576000848401525b50505050565b6000601f19601f8301169050919050565b6000613b1982613aae565b613b238185613ab9565b9350613b33818560208601613aca565b613b3c81613afd565b840191505092915050565b60006020820190508181036000830152613b618184613b0e565b905092915050565b6000819050919050565b613b7c81613b69565b8114613b8757600080fd5b50565b600081359050613b9981613b73565b92915050565b600060208284031215613bb557613bb46138be565b5b6000613bc384828501613b8a565b91505092915050565b613bd581613b69565b82525050565b6000602082019050613bf06000830184613bcc565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c3382613afd565b810181811067ffffffffffffffff82111715613c5257613c51613bfb565b5b80604052505050565b6000613c656138b4565b9050613c718282613c2a565b919050565b600067ffffffffffffffff821115613c9157613c90613bfb565b5b602082029050602081019050919050565b600080fd5b6000613cba613cb584613c76565b613c5b565b90508083825260208201905060208402830185811115613cdd57613cdc613ca2565b5b835b81811015613d065780613cf28882613947565b845260208401935050602081019050613cdf565b5050509392505050565b600082601f830112613d2557613d24613bf6565b5b8135613d35848260208601613ca7565b91505092915050565b600080fd5b600067ffffffffffffffff821115613d5e57613d5d613bfb565b5b613d6782613afd565b9050602081019050919050565b82818337600083830152505050565b6000613d96613d9184613d43565b613c5b565b905082815260208101848484011115613db257613db1613d3e565b5b613dbd848285613d74565b509392505050565b600082601f830112613dda57613dd9613bf6565b5b8135613dea848260208601613d83565b91505092915050565b600080600080600060a08688031215613e0f57613e0e6138be565b5b6000613e1d88828901613911565b9550506020613e2e88828901613911565b945050604086013567ffffffffffffffff811115613e4f57613e4e6138c3565b5b613e5b88828901613d10565b935050606086013567ffffffffffffffff811115613e7c57613e7b6138c3565b5b613e8888828901613d10565b925050608086013567ffffffffffffffff811115613ea957613ea86138c3565b5b613eb588828901613dc5565b9150509295509295909350565b60008060408385031215613ed957613ed86138be565b5b6000613ee785828601613b8a565b9250506020613ef885828601613911565b9150509250929050565b600060208284031215613f1857613f176138be565b5b6000613f2684828501613911565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b613f7181613f5b565b82525050565b600082825260208201905092915050565b6000613f9382613aae565b613f9d8185613f77565b9350613fad818560208601613aca565b613fb681613afd565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ff681613926565b82525050565b60006140088383613fed565b60208301905092915050565b6000602082019050919050565b600061402c82613fc1565b6140368185613fcc565b935061404183613fdd565b8060005b838110156140725781516140598882613ffc565b975061406483614014565b925050600181019050614045565b5085935050505092915050565b600060c0830160008301516140976000860182613f68565b50602083015184820360208601526140af8282613f88565b915050604083015184820360408601526140c98282613f88565b915050606083015184820360608601526140e38282613f88565b915050608083015184820360808601526140fd8282613f88565b91505060a083015184820360a08601526141178282614021565b9150508091505092915050565b6000614130838361407f565b905092915050565b6000602082019050919050565b600061415082613f2f565b61415a8185613f3a565b93508360208202850161416c85613f4b565b8060005b858110156141a857848403895281516141898582614124565b945061419483614138565b925060208a01995050600181019050614170565b50829750879550505050505092915050565b600060208201905081810360008301526141d48184614145565b905092915050565b600067ffffffffffffffff8211156141f7576141f6613bfb565b5b602082029050602081019050919050565b600061421b614216846141dc565b613c5b565b9050808382526020820190506020840283018581111561423e5761423d613ca2565b5b835b8181101561426757806142538882613911565b845260208401935050602081019050614240565b5050509392505050565b600082601f83011261428657614285613bf6565b5b8135614296848260208601614208565b91505092915050565b600080604083850312156142b6576142b56138be565b5b600083013567ffffffffffffffff8111156142d4576142d36138c3565b5b6142e085828601614271565b925050602083013567ffffffffffffffff811115614301576143006138c3565b5b61430d85828601613d10565b9150509250929050565b600082825260208201905092915050565b600061433382613fc1565b61433d8185614317565b935061434883613fdd565b8060005b838110156143795781516143608882613ffc565b975061436b83614014565b92505060018101905061434c565b5085935050505092915050565b600060208201905081810360008301526143a08184614328565b905092915050565b600060c0830160008301516143c06000860182613f68565b50602083015184820360208601526143d88282613f88565b915050604083015184820360408601526143f28282613f88565b9150506060830151848203606086015261440c8282613f88565b915050608083015184820360808601526144268282613f88565b91505060a083015184820360a08601526144408282614021565b9150508091505092915050565b6000602082019050818103600083015261446781846143a8565b905092915050565b60008060408385031215614486576144856138be565b5b600061449485828601613b8a565b92505060206144a585828601613947565b9150509250929050565b6144b8816138e8565b82525050565b60006020820190506144d360008301846144af565b92915050565b6144e281613a4b565b81146144ed57600080fd5b50565b6000813590506144ff816144d9565b92915050565b6000806040838503121561451c5761451b6138be565b5b600061452a85828601613911565b925050602061453b858286016144f0565b9150509250929050565b6000614550826138c8565b9050919050565b61456081614545565b811461456b57600080fd5b50565b60008135905061457d81614557565b92915050565b600060208284031215614599576145986138be565b5b60006145a78482850161456e565b91505092915050565b6145b981613f5b565b81146145c457600080fd5b50565b6000813590506145d6816145b0565b92915050565b600067ffffffffffffffff8211156145f7576145f6613bfb565b5b61460082613afd565b9050602081019050919050565b600061462061461b846145dc565b613c5b565b90508281526020810184848401111561463c5761463b613d3e565b5b614647848285613d74565b509392505050565b600082601f83011261466457614663613bf6565b5b813561467484826020860161460d565b91505092915050565b600080600080600080600060e0888a03121561469c5761469b6138be565b5b60006146aa8a828b016145c7565b975050602088013567ffffffffffffffff8111156146cb576146ca6138c3565b5b6146d78a828b0161464f565b965050604088013567ffffffffffffffff8111156146f8576146f76138c3565b5b6147048a828b0161464f565b955050606088013567ffffffffffffffff811115614725576147246138c3565b5b6147318a828b0161464f565b945050608088013567ffffffffffffffff811115614752576147516138c3565b5b61475e8a828b0161464f565b93505060a088013567ffffffffffffffff81111561477f5761477e6138c3565b5b61478b8a828b01613d10565b92505060c088013567ffffffffffffffff8111156147ac576147ab6138c3565b5b6147b88a828b0161464f565b91505092959891949750929550565b600080604083850312156147de576147dd6138be565b5b60006147ec85828601613911565b92505060206147fd85828601613911565b9150509250929050565b600080600080600060a08688031215614823576148226138be565b5b600061483188828901613911565b955050602061484288828901613911565b945050604061485388828901613947565b935050606061486488828901613947565b925050608086013567ffffffffffffffff811115614885576148846138c3565b5b61489188828901613dc5565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006148fa602a83613ab9565b91506149058261489e565b604082019050919050565b60006020820190508181036000830152614929816148ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061497757607f821691505b6020821081141561498b5761498a614930565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546149be8161495f565b6149c88186614991565b945060018216600081146149e357600181146149f457614a27565b60ff19831686528186019350614a27565b6149fd8561499c565b60005b83811015614a1f57815481890152600182019150602081019050614a00565b838801955050505b50505092915050565b6000614a3b82613aae565b614a458185614991565b9350614a55818560208601613aca565b80840191505092915050565b6000614a6d82856149b1565b9150614a798284614a30565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000614ae1602f83613ab9565b9150614aec82614a85565b604082019050919050565b60006020820190508181036000830152614b1081614ad4565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614b73602f83613ab9565b9150614b7e82614b17565b604082019050919050565b60006020820190508181036000830152614ba281614b66565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614c1282613926565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c4557614c44614bd8565b5b600182019050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614cac602983613ab9565b9150614cb782614c50565b604082019050919050565b60006020820190508181036000830152614cdb81614c9f565b9050919050565b6000614ced82613f5b565b9150614cf883613f5b565b92508260ff03821115614d0e57614d0d614bd8565b5b828201905092915050565b600060039050919050565b600081905092915050565b6000819050919050565b614d4281613926565b82525050565b6000614d548383614d39565b60208301905092915050565b6000602082019050919050565b614d7681614d19565b614d808184614d24565b9250614d8b82614d2f565b8060005b83811015614dbc578151614da38782614d48565b9650614dae83614d60565b925050600181019050614d8f565b505050505050565b6000614dd08284614d6d565b60608201915081905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614e3b602883613ab9565b9150614e4682614ddf565b604082019050919050565b60006020820190508181036000830152614e6a81614e2e565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614ecd602583613ab9565b9150614ed882614e71565b604082019050919050565b60006020820190508181036000830152614efc81614ec0565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614f5f602a83613ab9565b9150614f6a82614f03565b604082019050919050565b60006020820190508181036000830152614f8e81614f52565b9050919050565b6000614fa082613926565b9150614fab83613926565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614fe057614fdf614bd8565b5b828201905092915050565b600060408201905081810360008301526150058185614328565b905081810360208301526150198184614328565b90509392505050565b60008151905061503181613b73565b92915050565b60006020828403121561504d5761504c6138be565b5b600061505b84828501615022565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061509e82613926565b91506150a983613926565b9250826150b9576150b8615064565b5b828206905092915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615120602983613ab9565b915061512b826150c4565b604082019050919050565b6000602082019050818103600083015261514f81615113565b9050919050565b600060408201905061516b600083018561399c565b615178602083018461399c565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006151a68261517f565b6151b0818561518a565b93506151c0818560208601613aca565b6151c981613afd565b840191505092915050565b600060a0820190506151e960008301886144af565b6151f660208301876144af565b81810360408301526152088186614328565b9050818103606083015261521c8185614328565b90508181036080830152615230818461519b565b90509695505050505050565b60008151905061524b816139f2565b92915050565b600060208284031215615267576152666138be565b5b60006152758482850161523c565b91505092915050565b60008160e01c9050919050565b600060033d11156152aa5760046000803e6152a760005161527e565b90505b90565b600060443d10156152bd57615340565b6152c56138b4565b60043d036004823e80513d602482011167ffffffffffffffff821117156152ed575050615340565b808201805167ffffffffffffffff81111561530b5750505050615340565b80602083010160043d038501811115615328575050505050615340565b61533782602001850186613c2a565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061539f603483613ab9565b91506153aa82615343565b604082019050919050565b600060208201905081810360008301526153ce81615392565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615431602883613ab9565b915061543c826153d5565b604082019050919050565b6000602082019050818103600083015261546081615424565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061549d601783614991565b91506154a882615467565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006154e9601183614991565b91506154f4826154b3565b601182019050919050565b600061550a82615490565b91506155168285614a30565b9150615521826154dc565b915061552d8284614a30565b91508190509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615595602183613ab9565b91506155a082615539565b604082019050919050565b600060208201905081810360008301526155c481615588565b9050919050565b600060a0820190506155e060008301886144af565b6155ed60208301876144af565b6155fa604083018661399c565b615607606083018561399c565b8181036080830152615619818461519b565b90509695505050505050565b600061563082613926565b915061563b83613926565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561567457615673614bd8565b5b828202905092915050565b600061568a82613926565b9150600082141561569e5761569d614bd8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006156df602083613ab9565b91506156ea826156a9565b602082019050919050565b6000602082019050818103600083015261570e816156d2565b9050919050565b600061572082613926565b915061572b83613926565b92508282101561573e5761573d614bd8565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220206790ffdaa7eed1ba26cf0fb284a6bfeb8614b76a06cb2f870f9ae2d3e8928664736f6c63430008090033",
  "devdoc": {
    "author": "TobowerTheGreatAxios",
    "details": "This smart contract is an ERC-1155 standard contractThis contract is the core tokens for the mini-game*",
    "events": {
      "NewItem(uint256)": {
        "details": "Used in the [addItem] function",
        "params": {
          "tokenId": "The [tokenId] that was created"
        }
      },
      "NewPlayer(address,uint256[3])": {
        "details": "Used in the [initialMint] functionAll Tokens Minted will be equal to 1",
        "params": {
          "initialTokens": "The [initialTokens] that were added EXACT === 3",
          "newPlayer": "The [newPlayer]that was added by address"
        }
      },
      "TierUnlocked(address,uint256,uint8)": {
        "details": "Used inside the [winBattle] function",
        "params": {
          "player": "The [player] who is unlocked a new tier",
          "tier": "The [tier] that was unlocked",
          "tokenId": "The [tokenId] that was granted for this new tier"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addItem(uint8,string,string,string,string,uint256[],string)": {
        "details": "Creates Metadata -> Stores as New IndexSets Token URI for Backward Compatability with MarketplacesUpdates Number Of ItemsEmits [NewItem] event",
        "params": {
          "animation": "Animation of the Item",
          "beats": "List of who the token beats",
          "description": "Description of the Item",
          "image": "Image of the Item",
          "name": "Name of the Item",
          "tokenURI": "Gen I Token URI"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getItems(address)": {
        "details": "Thoughts on making this a signed request during ETH CC?",
        "params": {
          "_address": "of the user"
        },
        "returns": {
          "_0": "GameItemMetadata[] the items of the player"
        }
      },
      "getOnChainToken(uint256)": {
        "params": {
          "tokenId": "of the token to retreive"
        },
        "returns": {
          "_0": "GameItemMetadata of the Item"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUnlockDate()": {
        "details": "Can be deprecated",
        "returns": {
          "_0": "uint256 time in epoch * 1000"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialMint(address)": {
        "details": "Initial Mint FunctionOnly Callalble by MINTER_ROLEEmits [NewPlayer] event and adds a new player",
        "params": {
          "receiver": "the individual receiving the intial mint"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isLocked()": {
        "details": "Internal/ExternalReturns True if Locked",
        "returns": {
          "_0": "bool if is locked"
        }
      },
      "playoff()": {
        "details": "Uses RNG to Find # between 0-1000Returns true for P2, False for P2",
        "returns": {
          "_0": "bool "
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty."
      },
      "winBattle(address,uint256)": {
        "details": "On Battle Win -> Win Manager Mints",
        "params": {
          "receiever": "the user that wins",
          "tokenId": "The tokenId to be minted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewItem(uint256)": {
        "notice": "Emits a new item being added to the contract [token]"
      },
      "NewPlayer(address,uint256[3])": {
        "notice": "Emits a new player being added to the contract [address]"
      },
      "TierUnlocked(address,uint256,uint8)": {
        "notice": "Emits a TierUnlocked allowing for the frontend to notify the player"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Admin Role to Toggle Contract"
      },
      "MINTER_ROLE()": {
        "notice": "Can Fire Initial Mint"
      },
      "WIN_MANAGER_ROLE()": {
        "notice": "Can Mint on Wini"
      },
      "addItem(uint8,string,string,string,string,uint256[],string)": {
        "notice": "Admin Function that enables the admin owner to add new tokens to the contract storage"
      },
      "getItems(address)": {
        "notice": "Loads all the Metadata by a player in order to allow them to load the data"
      },
      "getNumberPlayers()": {
        "notice": "Retreives the current number of players/holders"
      },
      "getOnChainToken(uint256)": {
        "notice": "Returns on Chain Token - Single (Metadata)"
      },
      "getUnlockDate()": {
        "notice": "Retreives Unlock Date"
      },
      "isLocked()": {
        "notice": "Checks if contract is locked"
      },
      "playoff()": {
        "notice": "Playoff Function for Battle.sol"
      },
      "supportsInterface(bytes4)": {
        "notice": "Required for Inheriting Contracts"
      },
      "winBattle(address,uint256)": {
        "notice": "WIN_MANAGER_CALL"
      }
    },
    "notice": "GameItems for ETH CC",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2922_storage)"
      },
      {
        "astId": 568,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 574,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 576,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1941,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_baseURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1945,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3247,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "numberItems",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3250,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "numberPlayers",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3256,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "metadata",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(GameItemMetadata)4097_storage)"
      },
      {
        "astId": 3280,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "unlockDate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2922_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2922_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(GameItemMetadata)4097_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGameItems.GameItemMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(GameItemMetadata)4097_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2922_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2921,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2621_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(GameItemMetadata)4097_storage": {
        "encoding": "inplace",
        "label": "struct IGameItems.GameItemMetadata",
        "members": [
          {
            "astId": 4085,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "tier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4087,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4089,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4091,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "image",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4093,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "animationUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4096,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "beats",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2621_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2616,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2620,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}