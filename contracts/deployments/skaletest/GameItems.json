{
  "address": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diceRollerContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPlayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256[3]",
          "name": "initialTokens",
          "type": "uint256[3]"
        }
      ],
      "name": "NewPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "TierUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "Winner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_APPRENTICE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIN_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animation",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "beats",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "beats",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IGameItems.GameItemMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOnChainToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "tier",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "beats",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IGameItems.GameItemMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "initialMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playoff",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiever",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "winBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x905173B6C0A51925d3C9B619466c623c754Fb7BB",
    "contractAddress": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
    "transactionIndex": 0,
    "gasUsed": "5438368",
    "logsBloom": "0x00004004000000000800000000000000080000004000200000000000000000000000000000000100000000000000004000000000000800000000000000082000000000000000000000000000000000000000000020000000000100000000000000000000020000400000000000000800000000000000000800000000001000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000001000000000000100000000000020000200000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x007076895d19a89a8c8326dc40250383963d26df6e2432dbb63063cef2d7f8aa",
    "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1311064,
        "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
        "address": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x007076895d19a89a8c8326dc40250383963d26df6e2432dbb63063cef2d7f8aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1311064,
        "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
        "address": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x007076895d19a89a8c8326dc40250383963d26df6e2432dbb63063cef2d7f8aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1311064,
        "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
        "address": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb",
          "0x000000000000000000000000905173b6c0a51925d3c9b619466c623c754fb7bb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x007076895d19a89a8c8326dc40250383963d26df6e2432dbb63063cef2d7f8aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1311064,
        "transactionHash": "0x5995776932d19d956c3ec51b1bf6536bf810b93e58fdadd0f87e12246b295c68",
        "address": "0xD098268220F2b1A8cBb1fe5db9C51bd0f9102813",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x126ac3dfb0f83057bc2f965522f6bbd57f77c27a938e44ca37b53763355c6175",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x007076895d19a89a8c8326dc40250383963d26df6e2432dbb63063cef2d7f8aa"
      }
    ],
    "blockNumber": 1311064,
    "cumulativeGasUsed": "5438368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x90C9eCc0D4a842BB97347D745977B156e83d939c"
  ],
  "numDeployments": 5,
  "solcInputHash": "8f44e4f37c5465c556c7716d8aa86ff4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diceRollerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPlayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[3]\",\"name\":\"initialTokens\",\"type\":\"uint256[3]\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"TierUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_APPRENTICE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animation\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IGameItems.GameItemMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOnChainToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"beats\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IGameItems.GameItemMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"initialMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playoff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"winBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"TobowerTheGreatAxios\",\"details\":\"This smart contract is an ERC-1155 standard contractThis contract is the core tokens for the mini-game*\",\"events\":{\"NewItem(uint256)\":{\"details\":\"Used in the [addItem] function\",\"params\":{\"tokenId\":\"The [tokenId] that was created\"}},\"NewPlayer(address,uint256[3])\":{\"details\":\"Used in the [initialMint] functionAll Tokens Minted will be equal to 1\",\"params\":{\"initialTokens\":\"The [initialTokens] that were added EXACT === 3\",\"newPlayer\":\"The [newPlayer]that was added by address\"}},\"TierUnlocked(address,uint256,uint8)\":{\"details\":\"Used inside the [winBattle] function\",\"params\":{\"player\":\"The [player] who is unlocked a new tier\",\"tier\":\"The [tier] that was unlocked\",\"tokenId\":\"The [tokenId] that was granted for this new tier\"}},\"Winner(address)\":{\"details\":\"Fires once a player has all of the last tier of items\",\"params\":{\"player\":\"the address of the winner\"}}},\"kind\":\"dev\",\"methods\":{\"addItem(uint8,string,string,string,string,uint256[],string)\":{\"details\":\"Creates Metadata -> Stores as New IndexSets Token URI for Backward Compatability with MarketplacesUpdates Number Of ItemsEmits [NewItem] event\",\"params\":{\"animation\":\"Animation of the Item\",\"beats\":\"List of who the token beats\",\"description\":\"Description of the Item\",\"image\":\"Image of the Item\",\"name\":\"Name of the Item\",\"tokenURI\":\"Gen I Token URI\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getItems(address)\":{\"details\":\"Thoughts on making this a signed request during ETH CC?\",\"params\":{\"_address\":\"of the user\"},\"returns\":{\"_0\":\"GameItemMetadata[] the items of the player\"}},\"getNumberItems()\":{\"returns\":{\"_0\":\"uint256 of the number of active game items\"}},\"getNumberPlayers()\":{\"returns\":{\"_0\":\"\"}},\"getOnChainToken(uint256)\":{\"params\":{\"tokenId\":\"of the token to retreive\"},\"returns\":{\"_0\":\"GameItemMetadata of the Item\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUnlockDate()\":{\"details\":\"Can be deprecated\",\"returns\":{\"_0\":\"uint256 time in epoch * 1000\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialMint(address)\":{\"details\":\"Initial Mint FunctionOnly Callalble by MINTER_ROLEEmits [NewPlayer] event and adds a new player\",\"params\":{\"receiver\":\"the individual receiving the intial mint\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isLocked()\":{\"details\":\"Internal/ExternalReturns True if Locked\",\"returns\":{\"_0\":\"bool if is locked\"}},\"playoff()\":{\"details\":\"Uses RNG to Find # between 0-1000Returns true for P2, False for P2\",\"returns\":{\"_0\":\"bool \"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty.\"},\"winBattle(address,uint256)\":{\"details\":\"On Battle Win -> Win Manager Mints\",\"params\":{\"receiever\":\"the user that wins\",\"tokenId\":\"The tokenId to be minted\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewItem(uint256)\":{\"notice\":\"Emits a new item being added to the contract [token]\"},\"NewPlayer(address,uint256[3])\":{\"notice\":\"Emits a new player being added to the contract [address]\"},\"TierUnlocked(address,uint256,uint8)\":{\"notice\":\"Emits a TierUnlocked allowing for the frontend to notify the player\"},\"Winner(address)\":{\"notice\":\"Emits a Winner event\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Admin Role to Toggle Contract\"},\"MINTER_APPRENTICE_ROLE()\":{\"notice\":\"Minter Role Apprentice\"},\"MINTER_ROLE()\":{\"notice\":\"Can Fire Initial Mint\"},\"WIN_MANAGER_ROLE()\":{\"notice\":\"Can Mint on Wini\"},\"addItem(uint8,string,string,string,string,uint256[],string)\":{\"notice\":\"Admin Function that enables the admin owner to add new tokens to the contract storage\"},\"getItems(address)\":{\"notice\":\"Loads all the Metadata by a player in order to allow them to load the data\"},\"getNumberItems()\":{\"notice\":\"Retrieves the Total Number of Items in the Game\"},\"getNumberPlayers()\":{\"notice\":\"Retreives the current number of players/holders\"},\"getOnChainToken(uint256)\":{\"notice\":\"Returns on Chain Token - Single (Metadata)\"},\"getUnlockDate()\":{\"notice\":\"Retreives Unlock Date\"},\"isLocked()\":{\"notice\":\"Checks if contract is locked\"},\"playoff()\":{\"notice\":\"Playoff Function for Battle.sol\"},\"supportsInterface(bytes4)\":{\"notice\":\"Required for Inheriting Contracts\"},\"winBattle(address,uint256)\":{\"notice\":\"WIN_MANAGER_CALL\"}},\"notice\":\"GameItems for ETH CC\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameItems.sol\":\"GameItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/GameItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"./interfaces/IGameItems.sol\\\";\\nimport \\\"./interfaces/IDiceRoller.sol\\\";\\n\\n/**\\n*\\n* GameItems for ETH CC\\n*\\n* @author Tobower\\n* @author TheGreatAxios\\n*\\n* @dev This smart contract is an ERC-1155 standard contract\\n* @dev This contract is the core tokens for the mini-game\\n*\\n**/\\ncontract GameItems is AccessControlEnumerable, ERC1155URIStorage, IGameItems {\\n\\n    /// @notice Admin Role to Toggle Contract\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    /// @notice Can Fire Initial Mint\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    /// @notice Minter Role Apprentice\\n    bytes32 public constant MINTER_APPRENTICE_ROLE = keccak256(\\\"MINTER_APPRENTICE_ROLE\\\");\\n    /// @notice Can Mint on Wini\\n    bytes32 public constant WIN_MANAGER_ROLE = keccak256(\\\"WIN_MANAGER_ROLE\\\");\\n    \\n    /// @notice the contract that provides random numbers\\n    IDiceRoller immutable diceRoller;\\n\\n    /// @notice Number of Items on the contract\\n    uint256 private numberItems;\\n    /// @notice Number of Active Players\\n    uint256 private numberPlayers;\\n    /// @notice The storage of the shared items on-chain #SKALE\\n    mapping(uint256 => GameItemMetadata) private metadata;\\n    /// @notice The mapping for tier unlocked\\n    mapping(uint256 => mapping(address => bool)) private tierTracker;\\n\\n    /// @notice Modifier Error String\\n    string private constant ACCESS_DENIED = \\\"Access Denied\\\";\\n    /// @notice InActive Error String\\n    string private constant CONTRACT_IN_ACTIVE = \\\"Not Enough Items\\\";\\n    /// @notice Invalid New Player - Already Has NFTs\\n    string private constant INVALID_NEW_PLAYER = \\\"Already Playing\\\";\\n    /// @notice Not an Item\\n    string private constant ITEM_DOES_NOT_EXIST = \\\"Item Does Not Exist\\\";\\n    /// @notice User Does Not Have Item\\n    string private constant USER_NO_ITEM = \\\"Missing an item\\\";\\n\\n    /// @notice Unlock Date After Etherum CC is Over\\n    uint256 private unlockDate = 1658451660;\\n    \\n    /// @notice Emits a new item being added to the contract [token]\\n    /// @dev Used in the [addItem] function\\n    /// @param tokenId The [tokenId] that was created\\n    event NewItem(uint256 indexed tokenId);\\n\\n    /// @notice Emits a new player being added to the contract [address]\\n    /// @dev Used in the [initialMint] function\\n    /// @dev All Tokens Minted will be equal to 1\\n    /// @param newPlayer The [newPlayer]that was added by address\\n    /// @param initialTokens The [initialTokens] that were added EXACT === 3\\n    // @param timestamp The [timestamp] of the new player joining\\n    event NewPlayer(address indexed newPlayer, uint256[3] indexed initialTokens);\\n\\n    /// @notice Emits a TierUnlocked allowing for the frontend to notify the player\\n    /// @dev Used inside the [winBattle] function\\n    /// @param player The [player] who is unlocked a new tier\\n    /// @param tokenId The [tokenId] that was granted for this new tier\\n    /// @param tier The [tier] that was unlocked\\n    event TierUnlocked(address indexed player, uint256 indexed tokenId, uint8 indexed tier);\\n\\n    /// @notice Emits a Winner event\\n    /// @dev Fires once a player has all of the last tier of items\\n    /// @param player the address of the winner\\n    event Winner(address indexed player);\\n\\n    constructor(address diceRollerContract) ERC1155(\\\"GameItems\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_APPRENTICE_ROLE, MINTER_ROLE);\\n        diceRoller = IDiceRoller(diceRollerContract);\\n        numberItems = 0;\\n        numberPlayers = 0;\\n    }\\n\\n    /// @notice Only Admin -> Calls Add Item\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Only Minter -> Calls Initial Mint\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender) || hasRole(MINTER_APPRENTICE_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Only Win Manager -> Call via Proxy\\n    modifier onlyWinManager() {\\n        require(hasRole(WIN_MANAGER_ROLE, msg.sender), ACCESS_DENIED);\\n        _;\\n    }\\n\\n    /// @notice Admin Function that enables the admin owner to add new tokens to the contract storage\\n    /// @dev Creates Metadata -> Stores as New Index\\n    /// @dev Sets Token URI for Backward Compatability with Marketplaces\\n    /// @dev Updates Number Of Items\\n    /// @dev Emits [NewItem] event\\n    /// @param name Name of the Item\\n    /// @param description Description of the Item\\n    /// @param image Image of the Item\\n    /// @param animation Animation of the Item\\n    /// @param beats List of who the token beats\\n    /// @param tokenURI Gen I Token URI\\n    function addItem(uint8 tier, string memory name, string memory description, string memory image, string memory animation, uint256[] memory beats, string memory tokenURI) override external onlyAdmin {\\n        uint256 _currentItemIndex = numberItems;\\n        GameItemMetadata memory newItem = GameItemMetadata(tier, name, description, image, animation, beats);\\n        metadata[_currentItemIndex] = newItem;\\n        _setURI(_currentItemIndex, tokenURI);\\n        numberItems++;\\n        emit NewItem(_currentItemIndex);\\n    }\\n\\n    /// @notice Returns on Chain Token - Single (Metadata)\\n    /// @param tokenId of the token to retreive\\n    /// @return GameItemMetadata of the Item\\n    function getOnChainToken(uint256 tokenId)  external view  returns (GameItemMetadata memory) { \\n        return metadata[tokenId];\\n    }\\n\\n    /// @notice Loads all the Metadata by a player in order to allow them to load the data\\n    /// @dev Thoughts on making this a signed request during ETH CC?\\n    /// @param _address of the user\\n    /// @return GameItemMetadata[] the items of the player\\n    function getItems(address _address) override external view returns (GameItemMetadata[] memory) {\\n        GameItemMetadata[] memory _items = new GameItemMetadata[](numberItems);\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            if (balanceOf(_address, i) >= 1) {\\n                _items[i] = metadata[i];\\n            }\\n        }\\n\\n        return _items;\\n    }\\n\\n    /// @notice Retreives the current number of players/holders\\n    /// @return \\n    function getNumberPlayers() override external view returns (uint256) {\\n        return numberPlayers;\\n    }\\n\\n    /// @notice Retrieves the Total Number of Items in the Game\\n    /// @return uint256 of the number of active game items\\n    function getNumberItems() external view returns (uint256) {\\n        return numberItems;\\n    }\\n\\n    /// @notice Retreives Unlock Date\\n    /// @dev Can be deprecated\\n    /// @return uint256 time in epoch * 1000\\n    function getUnlockDate() external view returns (uint256) {\\n        return unlockDate;\\n    }\\n\\n    /// @dev Initial Mint Function\\n    /// @dev Only Callalble by MINTER_ROLE\\n    /// @dev Emits [NewPlayer] event and adds a new player\\n    /// @param receiver the individual receiving the intial mint\\n    function initialMint(address payable receiver) override external payable onlyMinter {\\n        require(_noBalances(receiver), INVALID_NEW_PLAYER);\\n\\n        uint256[3] memory opt1 = [uint256(0),1,2];\\n        uint256[3] memory opt2 = [uint256(1),2,3];\\n        uint256[3] memory opt3 = [uint256(2),3,4];\\n        uint256[3] memory opt4 = [uint256(0),2,4];\\n        uint256[3] memory opt5 = [uint256(1),3,4];\\n        uint256 _rng = _getRandomNumber(0, 4);\\n\\n        uint256[3] memory tokenIds = [uint256(0), 0, 0];\\n\\n        if (_rng == 0) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt1[i]);\\n                tokenIds = opt1;\\n            }\\n        } else if (_rng == 1) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt2[i]);\\n                tokenIds = opt2;\\n            }\\n        } else if (_rng == 2) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt3[i]);\\n                tokenIds = opt3;\\n            }\\n        } else if (_rng == 3) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt4[i]);\\n                tokenIds = opt4;\\n            }\\n        } else if (_rng == 4) {\\n            for (uint256 i = 0; i < 3; i++) {\\n                _internalMint(receiver, opt5[i]);\\n                tokenIds = opt5;\\n                \\n            }\\n        }\\n\\n        numberPlayers++;\\n        receiver.transfer(msg.value);\\n        emit NewPlayer(receiver, tokenIds);\\n    }\\n\\n    /// @notice Checks if contract is locked\\n    /// @dev Internal/External\\n    /// @dev Returns True if Locked\\n    /// @return bool if is locked\\n    function isLocked() public view returns (bool) {\\n        return block.timestamp <= unlockDate;\\n    }\\n\\n    /// @notice Required for Inheriting Contracts\\n    function supportsInterface(bytes4 interfaceId) public view override (AccessControlEnumerable, ERC1155, IERC165) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Playoff Function for Battle.sol\\n    /// @dev Uses RNG to Find # between 0-1000\\n    /// @dev Returns true for P2, False for P2\\n    /// @return bool \\n    function playoff() override external view onlyWinManager returns (bool) {\\n        return _getRandomNumber(0, 1000) < 500;\\n    }\\n\\n    /// @notice WIN_MANAGER_CALL\\n    /// @dev On Battle Win -> Win Manager Mints\\n    /// @param receiever the user that wins\\n    /// @param tokenId The tokenId to be minted\\n    function winBattle(address receiever, uint256 tokenId) override external onlyWinManager {\\n        /// Check The Tier of the Winner Item\\n        uint8 tier = metadata[tokenId].tier;\\n        bool _emptyTier = _isEmptyTier(receiever, tier);\\n        /// Run Internal Mint for the Winner\\n        _internalMint(receiever, tokenId);\\n        \\n        if (_emptyTier && tier != 2) {\\n            _unlockTier(receiever,  tier);\\n            emit TierUnlocked(receiever, tokenId, tier);\\n        } else if ((tier == 0 || tier == 1) && _checkTier(receiever, tier) && !_tierUnlocked(receiever, tier + 1)) {\\n            uint256 nextTierTokenId = _randomTokenId(tier + 1);\\n            _internalMint(receiever, nextTierTokenId);\\n            _unlockTier(receiever,  tier + 1);\\n            emit TierUnlocked(receiever, nextTierTokenId, tier + 1);\\n        }\\n\\n        if (tier == 2 && !_tierUnlocked(receiever, 3)) {\\n            bool _isWinner = _checkWinner(receiever);\\n            if (_isWinner) {\\n                _unlockTier(receiever, 3);\\n                emit Winner(receiever);\\n            }\\n        } \\n\\n        /// Else if Tier 3 Check For Winner\\n        \\n    }\\n\\n    /// @dev Checks if a player is a winner\\n    /// @param receiver the player to check\\n    /// @return bool if the player has completed Tier III\\n    function _checkWinner(address receiver) internal view returns (bool) {\\n        for (uint256 i = 9; i < 12; i++) {\\n            if (balanceOf(receiver, i) == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Checks if a player has an empty tier\\n    /// @param receiver the player to check\\n    /// @param tier the tier to check\\n    /// @return bool if the player has completed the tier\\n    function _isEmptyTier(address receiver, uint256 tier) internal view returns (bool) {\\n        uint256 start = tier == 0 ? 0 : 5;\\n        uint256 stop = tier == 0 ? 5 : 9;\\n        for (uint256 i = start; i < stop; i++) {\\n            if (balanceOf(receiver, i) > 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n\\n    /// @dev Checks if a player has completed the tier that is being checked\\n    /// @param receiver the player to check\\n    /// @param tier the tier to check\\n    /// @return bool if the player has completed the tier\\n    function _checkTier(address receiver, uint256 tier) internal view returns (bool) {\\n        uint256 start = tier == 0 ? 0 : 5;\\n        uint256 stop = tier == 0 ? 5 : 9;\\n        for (uint256 i = start; i < stop; i++) {\\n            if (balanceOf(receiver, i) == 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal Mint\\n    /// @dev Mints the Selected Token Id to the Selected Reciever\\n    /// @dev Always mints only 1\\n    /// @param receiver address of the person who the token will go to\\n    /// @param tokenId The Specific token they should receive\\n    function _internalMint(address receiver, uint256 tokenId) internal {\\n        _mint(receiver, tokenId, 1, \\\"\\\");\\n    }\\n\\n    /// @notice Checks If a Player being added has toknes\\n    /// @dev Will Return True -> Allowing New Player to Be Created\\n    /// @dev If Player has any token, will not allow them to be added again\\n    /// @param checkFor address to check\\n    function _noBalances(address checkFor) internal view returns (bool) {\\n        for (uint256 i = 0; i < numberItems; i++) {\\n            if (balanceOf(checkFor, i) > 0) return false;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Selects a Random Token Id of the Next Tier\\n    /// @dev Utilizes RNG Plus Length of Previous Item List\\n    /// @dev !!! Unsure if the else statement should be here, theoretically impossible !!!\\n    /// @param tier uint8 of the next tier to select\\n    /// @return uint256 of the tokenId Selected\\n    function _randomTokenId(uint8 tier) internal view returns (uint256) {\\n        /// Tier == 2 -> returns 5, 6, 7, 8\\n        if (tier == 1) {\\n            return _getRandomNumber(5, 3);\\n        /// Tier == 3 -> returns 9, 10, 11\\n        } else if (tier == 2) {\\n            return _getRandomNumber(9, 2);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice SKALE RNG Casting\\n    /// @param minNumber the Minimum Number\\n    /// @param maxNumber the Max Number\\n    /// @return uint256 the returned random number \\n    function _getRandomNumber(uint256 minNumber, uint256 maxNumber) internal view returns (uint256) {\\n        uint256 _rng = minNumber + (uint256(diceRoller.getRandom()) % maxNumber);\\n        return _rng;\\n    }\\n\\n    /// @notice Checks if User has unlocked a tier\\n    /// @param player address\\n    /// @param tier uint8 of the tier\\n    /// @return bool true if the user has already unlocked a tier or if they won\\n    function _tierUnlocked(address player, uint8 tier) internal view returns (bool) {\\n        return tierTracker[tier][player];\\n    }\\n\\n    /// @notice Unlocks Tier for PLayer\\n    /// @param player address\\n    /// @param tier uint8 of the tier\\n    function _unlockTier(address player, uint8 tier) internal {\\n        tierTracker[tier][player] = true;\\n    }\\n\\n    \\n}\",\"keccak256\":\"0x977daa50d74470ef4256f17d3e8d4d4257b3912172b2f3f56f7975080538d199\",\"license\":\"MIT\"},\"contracts/interfaces/IDiceRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDiceRoller {\\n\\n  function getRandom() external view returns (bytes32 rnd);\\n\\n}\",\"keccak256\":\"0x2cebcd9df36dd054dcba79fcec31e97f19fe48ffcaf10afd4ae0832965d9f5de\",\"license\":\"MIT\"},\"contracts/interfaces/IGameItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IGameItems is IERC1155 {\\n    struct GameItemMetadata {\\n        uint8 tier;\\n        string name;\\n        string description;\\n        string image;\\n        string animationUrl;\\n        uint256[] beats; // tokenIds of the tokens it beats\\n    }\\n\\n    function addItem(uint8 tier, string memory name, string memory description, string memory image, string memory animation, uint256[] memory beats, string memory tokenURI) external;\\n    function getOnChainToken(uint256 tokenId) external returns (GameItemMetadata memory);\\n    function getItems(address _address) external returns (GameItemMetadata[] memory);\\n    function getNumberItems() external returns (uint256);\\n    function getNumberPlayers() external returns (uint256);\\n    function getUnlockDate() external returns (uint256);\\n    function initialMint(address payable receiver) payable external;\\n    function isLocked() external returns (bool);\\n    function playoff() external returns (bool);\\n    function winBattle(address receiever, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xa21d08b1f5cfc7d7b66a41654e9d6e05a0fc0f5ab467f4c214bf758980942402\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cc5760003560e01c8063a22cb465116100f7578063cee0eb2d11610095578063e985e9c511610064578063e985e9c5146106c6578063f242432a14610703578063fe9e1b531461072c578063ff3c09e114610757576101cc565b8063cee0eb2d1461061e578063d539139314610649578063d547741f14610674578063d812649d1461069d576101cc565b8063b2c79c37116100d1578063b2c79c3714610571578063c268f9ba1461059a578063c594c916146105b6578063ca15c873146105e1576101cc565b8063a22cb465146104f2578063a4e2d6341461051b578063ada015da14610546576101cc565b80634d7366551161016f5780638119109e1161013e5780638119109e146104225780639010d07c1461044d57806391d148541461048a578063a217fddf146104c7576101cc565b80634d736655146103405780634e1273f41461037d57806375b238fc146103ba5780637856ac40146103e5576101cc565b8063248a9ca3116101ab578063248a9ca3146102885780632eb2c2d6146102c55780632f2ff15d146102ee57806336568abe14610317576101cc565b8062fdd58e146101d157806301ffc9a71461020e5780630e89341c1461024b575b600080fd5b3480156101dd57600080fd5b506101f860048036038101906101f39190613cc4565b610782565b6040516102059190613d13565b60405180910390f35b34801561021a57600080fd5b5061023560048036038101906102309190613d86565b61084c565b6040516102429190613dce565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d9190613de9565b61085e565b60405161027f9190613eaf565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190613f07565b610943565b6040516102bc9190613f43565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e7919061415b565b610962565b005b3480156102fa57600080fd5b506103156004803603810190610310919061422a565b610a03565b005b34801561032357600080fd5b5061033e6004803603810190610339919061422a565b610a24565b005b34801561034c57600080fd5b506103676004803603810190610362919061426a565b610aa7565b6040516103749190614522565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f9190614607565b610e37565b6040516103b191906146ee565b60405180910390f35b3480156103c657600080fd5b506103cf610f50565b6040516103dc9190613f43565b60405180910390f35b3480156103f157600080fd5b5061040c60048036038101906104079190613de9565b610f74565b60405161041991906147b5565b60405180910390f35b34801561042e57600080fd5b5061043761125e565b6040516104449190613dce565b60405180910390f35b34801561045957600080fd5b50610474600480360381019061046f91906147d7565b611318565b6040516104819190614826565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac919061422a565b611347565b6040516104be9190613dce565b60405180910390f35b3480156104d357600080fd5b506104dc6113b1565b6040516104e99190613f43565b60405180910390f35b3480156104fe57600080fd5b506105196004803603810190610514919061486d565b6113b8565b005b34801561052757600080fd5b506105306113ce565b60405161053d9190613dce565b60405180910390f35b34801561055257600080fd5b5061055b6113db565b6040516105689190613d13565b60405180910390f35b34801561057d57600080fd5b5061059860048036038101906105939190613cc4565b6113e5565b005b6105b460048036038101906105af91906148eb565b61169f565b005b3480156105c257600080fd5b506105cb611b2b565b6040516105d89190613d13565b60405180910390f35b3480156105ed57600080fd5b5061060860048036038101906106039190613f07565b611b35565b6040516106159190613d13565b60405180910390f35b34801561062a57600080fd5b50610633611b59565b6040516106409190613f43565b60405180910390f35b34801561065557600080fd5b5061065e611b7d565b60405161066b9190613f43565b60405180910390f35b34801561068057600080fd5b5061069b6004803603810190610696919061422a565b611ba1565b005b3480156106a957600080fd5b506106c460048036038101906106bf91906149e5565b611bc2565b005b3480156106d257600080fd5b506106ed60048036038101906106e89190614b2f565b611dc2565b6040516106fa9190613dce565b60405180910390f35b34801561070f57600080fd5b5061072a60048036038101906107259190614b6f565b611e56565b005b34801561073857600080fd5b50610741611ef7565b60405161074e9190613d13565b60405180910390f35b34801561076357600080fd5b5061076c611f01565b6040516107799190613f43565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90614c78565b60405180910390fd5b6002600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061085782612035565b9050919050565b6060600060066000848152602001908152602001600020805461088090614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546108ac90614cc7565b80156108f95780601f106108ce576101008083540402835291602001916108f9565b820191906000526020600020905b8154815290600101906020018083116108dc57829003601f168201915b5050505050905060008151116109175761091283612117565b61093b565b60058160405160200161092b929190614dc9565b6040516020818303038152906040525b915050919050565b6000806000838152602001908152602001600020600101549050919050565b61096a6121ab565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806109b057506109af856109aa6121ab565b611dc2565b5b6109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e690614e5f565b60405180910390fd5b6109fc85858585856121b3565b5050505050565b610a0c82610943565b610a15816124d8565b610a1f83836124ec565b505050565b610a2c6121ab565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090614ef1565b60405180910390fd5b610aa38282612520565b5050565b6060600060075467ffffffffffffffff811115610ac757610ac6613f63565b5b604051908082528060200260200182016040528015610b0057816020015b610aed613af3565b815260200190600190039081610ae55790505b50905060005b8151811015610e2d576001610b1b8583610782565b10610e1a57600960008281526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610b6b90614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9790614cc7565b8015610be45780601f10610bb957610100808354040283529160200191610be4565b820191906000526020600020905b815481529060010190602001808311610bc757829003601f168201915b50505050508152602001600282018054610bfd90614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2990614cc7565b8015610c765780601f10610c4b57610100808354040283529160200191610c76565b820191906000526020600020905b815481529060010190602001808311610c5957829003601f168201915b50505050508152602001600382018054610c8f90614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90614cc7565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b50505050508152602001600482018054610d2190614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4d90614cc7565b8015610d9a5780601f10610d6f57610100808354040283529160200191610d9a565b820191906000526020600020905b815481529060010190602001808311610d7d57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610df257602002820191906000526020600020905b815481526020019060010190808311610dde575b505050505081525050828281518110610e0e57610e0d614f11565b5b60200260200101819052505b8080610e2590614f6f565b915050610b06565b5080915050919050565b60608151835114610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e749061502a565b60405180910390fd5b6000835167ffffffffffffffff811115610e9a57610e99613f63565b5b604051908082528060200260200182016040528015610ec85781602001602082028036833780820191505090505b50905060005b8451811015610f4557610f15858281518110610eed57610eec614f11565b5b6020026020010151858381518110610f0857610f07614f11565b5b6020026020010151610782565b828281518110610f2857610f27614f11565b5b60200260200101818152505080610f3e90614f6f565b9050610ece565b508091505092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610f7c613af3565b600960008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182018054610fc790614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff390614cc7565b80156110405780601f1061101557610100808354040283529160200191611040565b820191906000526020600020905b81548152906001019060200180831161102357829003601f168201915b5050505050815260200160028201805461105990614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461108590614cc7565b80156110d25780601f106110a7576101008083540402835291602001916110d2565b820191906000526020600020905b8154815290600101906020018083116110b557829003601f168201915b505050505081526020016003820180546110eb90614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461111790614cc7565b80156111645780601f1061113957610100808354040283529160200191611164565b820191906000526020600020905b81548152906001019060200180831161114757829003601f168201915b5050505050815260200160048201805461117d90614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546111a990614cc7565b80156111f65780601f106111cb576101008083540402835291602001916111f6565b820191906000526020600020905b8154815290600101906020018083116111d957829003601f168201915b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561124e57602002820191906000526020600020905b81548152602001906001019080831161123a575b5050505050815250509050919050565b600061128a7f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611347565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f89190613eaf565b60405180910390fd5b506101f461131260006103e8612554565b10905090565b600061133f826001600086815260200190815260200160002061261a90919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6113ca6113c36121ab565b8383612634565b5050565b6000600b54421115905090565b6000600854905090565b61140f7f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec33611347565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d9190613eaf565b60405180910390fd5b5060006009600083815260200190815260200160002060000160009054906101000a900460ff16905060006114be848360ff166127a1565b90506114ca8484612820565b8080156114db575060028260ff1614155b15611537576114ea8483612840565b8160ff16838573ffffffffffffffffffffffffffffffffffffffff167ffa36168c733b4c601b17553edfb42b696a96fc35572f0eca85e7d3e24cc9560160405160405180910390a4611615565b60008260ff16148061154c575060018260ff16145b80156115615750611560848360ff166128b0565b5b8015611580575061157e84600184611579919061504a565b61292f565b155b1561161457600061159c600184611597919061504a565b61299a565b90506115a88582612820565b6115be856001856115b9919061504a565b612840565b6001836115cb919061504a565b60ff16818673ffffffffffffffffffffffffffffffffffffffff167ffa36168c733b4c601b17553edfb42b696a96fc35572f0eca85e7d3e24cc9560160405160405180910390a4505b5b60028260ff16148015611630575061162e84600361292f565b155b15611699576000611640856129e4565b9050801561169757611653856003612840565b8473ffffffffffffffffffffffffffffffffffffffff167f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c060405160405180910390a25b505b50505050565b6116c97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633611347565b806116fa57506116f97f126ac3dfb0f83057bc2f965522f6bbd57f77c27a938e44ca37b53763355c617533611347565b5b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611771576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117689190613eaf565b60405180910390fd5b5061177b81612a2f565b6040518060400160405280600f81526020017f416c726561647920506c6179696e670000000000000000000000000000000000815250906117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e99190613eaf565b60405180910390fd5b50600060405180606001604052806000815260200160018152602001600281525090506000604051806060016040528060018152602001600281526020016003815250905060006040518060600160405280600281526020016003815260200160048152509050600060405180606001604052806000815260200160028152602001600481525090506000604051806060016040528060018152602001600381526020016004815250905060006118ab60006004612554565b90506000604051806060016040528060008152602001600081526020016000815250905060008214156119215760005b600381101561191b57611905898983600381106118fb576118fa614f11565b5b6020020151612820565b879150808061191390614f6f565b9150506118db565b50611a69565b60018214156119735760005b600381101561196d576119578988836003811061194d5761194c614f11565b5b6020020151612820565b869150808061196590614f6f565b91505061192d565b50611a68565b60028214156119c55760005b60038110156119bf576119a98987836003811061199f5761199e614f11565b5b6020020151612820565b85915080806119b790614f6f565b91505061197f565b50611a67565b6003821415611a175760005b6003811015611a11576119fb898683600381106119f1576119f0614f11565b5b6020020151612820565b8491508080611a0990614f6f565b9150506119d1565b50611a66565b6004821415611a655760005b6003811015611a6357611a4d89858360038110611a4357611a42614f11565b5b6020020151612820565b8391508080611a5b90614f6f565b915050611a23565b505b5b5b5b5b60086000815480929190611a7c90614f6f565b91905055508773ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611ac7573d6000803e3d6000fd5b5080604051611ad6919061512c565b60405180910390208873ffffffffffffffffffffffffffffffffffffffff167f03c6cf41c8b7617d28bfe0b9ff6437547ae24b192cae60ec45f63977ba9ca56760405160405180910390a35050505050505050565b6000600b54905090565b6000611b5260016000848152602001908152602001600020612a7b565b9050919050565b7f126ac3dfb0f83057bc2f965522f6bbd57f77c27a938e44ca37b53763355c617581565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611baa82610943565b611bb3816124d8565b611bbd8383612520565b505050565b611bec7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611347565b6040518060400160405280600d81526020017f4163636573732044656e6965640000000000000000000000000000000000000081525090611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a9190613eaf565b60405180910390fd5b506000600754905060006040518060c001604052808a60ff168152602001898152602001888152602001878152602001868152602001858152509050806009600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019080519060200190611cf0929190613b2c565b506040820151816002019080519060200190611d0d929190613b2c565b506060820151816003019080519060200190611d2a929190613b2c565b506080820151816004019080519060200190611d47929190613b2c565b5060a0820151816005019080519060200190611d64929190613bb2565b50905050611d728284612a90565b60076000815480929190611d8590614f6f565b9190505550817f50bfe36855967d446b8ea65825360cacc53d0ec60543567ebfad26a51a2cfc4660405160405180910390a2505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611e5e6121ab565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611ea45750611ea385611e9e6121ab565b611dc2565b5b611ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eda90614e5f565b60405180910390fd5b611ef08585858585612afc565b5050505050565b6000600754905090565b7f581d7f64a8a641e01714c2dbb65d39f75e5db27e77fac6575785e5201e1b1dec81565b611f2f8282611347565b61200157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611fa66121ab565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061202d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d9b565b905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061210057507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612110575061210f82612e0b565b5b9050919050565b60606004805461212690614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461215290614cc7565b801561219f5780601f106121745761010080835404028352916020019161219f565b820191906000526020600020905b81548152906001019060200180831161218257829003601f168201915b50505050509050919050565b600033905090565b81518351146121f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ee906151b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225e9061524b565b60405180910390fd5b60006122716121ab565b9050612281818787878787612e85565b60005b84518110156124355760008582815181106122a2576122a1614f11565b5b6020026020010151905060008583815181106122c1576122c0614f11565b5b6020026020010151905060006002600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a906152dd565b60405180910390fd5b8181036002600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816002600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461241a91906152fd565b925050819055505050508061242e90614f6f565b9050612284565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516124ac929190615353565b60405180910390a46124c2818787878787612e8d565b6124d0818787878787612e95565b505050505050565b6124e9816124e46121ab565b61307c565b50565b6124f68282611f25565b61251b816001600085815260200190815260200160002061200590919063ffffffff16565b505050565b61252a8282613119565b61254f81600160008581526020019081526020016000206131fa90919063ffffffff16565b505050565b600080827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aacc5a176040518163ffffffff1660e01b815260040160206040518083038186803b1580156125be57600080fd5b505afa1580156125d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f6919061539f565b60001c61260391906153fb565b8461260e91906152fd565b90508091505092915050565b6000612629836000018361322a565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269a9061549e565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516127949190613dce565b60405180910390a3505050565b600080600083146127b35760056127b6565b60005b60ff16905060008084146127cb5760096127ce565b60055b60ff16905060008290505b818110156128125760006127ed8783610782565b11156127ff576000935050505061281a565b808061280a90614f6f565b9150506127d9565b506001925050505b92915050565b61283c8282600160405180602001604052806000815250613255565b5050565b6001600a60008360ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600083146128c25760056128c5565b60005b60ff16905060008084146128da5760096128dd565b60055b60ff16905060008290505b818110156129215760006128fc8783610782565b141561290e5760009350505050612929565b808061291990614f6f565b9150506128e8565b506001925050505b92915050565b6000600a60008360ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060018260ff1614156129bb576129b460056003612554565b90506129df565b60028260ff1614156129da576129d360096002612554565b90506129df565b600090505b919050565b600080600990505b600c811015612a24576000612a018483610782565b1415612a11576000915050612a2a565b8080612a1c90614f6f565b9150506129ec565b50600190505b919050565b600080600090505b600754811015612a70576000612a4d8483610782565b1115612a5d576000915050612a76565b8080612a6890614f6f565b915050612a37565b50600190505b919050565b6000612a8982600001613407565b9050919050565b80600660008481526020019081526020016000209080519060200190612ab7929190613b2c565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b612ae38461085e565b604051612af09190613eaf565b60405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b639061524b565b60405180910390fd5b6000612b766121ab565b90506000612b8385613418565b90506000612b9085613418565b9050612ba0838989858589612e85565b60006002600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2f906152dd565b60405180910390fd5b8581036002600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856002600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cef91906152fd565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612d6c9291906154be565b60405180910390a4612d82848a8a86868a612e8d565b612d90848a8a8a8a8a613492565b505050505050505050565b6000612da78383613679565b612e00578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612e05565b600090505b92915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612e7e5750612e7d8261369c565b5b9050919050565b505050505050565b505050505050565b612eb48473ffffffffffffffffffffffffffffffffffffffff16613716565b15613074578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612efa95949392919061553c565b602060405180830381600087803b158015612f1457600080fd5b505af1925050508015612f4557506040513d601f19601f82011682018060405250810190612f4291906155b9565b60015b612feb57612f516155f3565b806308c379a01415612fae5750612f66615615565b80612f715750612fb0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa59190613eaf565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe29061571d565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613069906157af565b60405180910390fd5b505b505050505050565b6130868282611347565b613115576130ab8173ffffffffffffffffffffffffffffffffffffffff166014613739565b6130b98360001c6020613739565b6040516020016130ca929190615867565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310c9190613eaf565b60405180910390fd5b5050565b6131238282611347565b156131f657600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061319b6121ab565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000613222836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613975565b905092915050565b600082600001828154811061324257613241614f11565b5b9060005260206000200154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156132c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132bc90615913565b60405180910390fd5b60006132cf6121ab565b905060006132dc85613418565b905060006132e985613418565b90506132fa83600089858589612e85565b846002600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461335a91906152fd565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516133d89291906154be565b60405180910390a46133ef83600089858589612e8d565b6133fe83600089898989613492565b50505050505050565b600081600001805490509050919050565b60606000600167ffffffffffffffff81111561343757613436613f63565b5b6040519080825280602002602001820160405280156134655781602001602082028036833780820191505090505b509050828160008151811061347d5761347c614f11565b5b60200260200101818152505080915050919050565b6134b18473ffffffffffffffffffffffffffffffffffffffff16613716565b15613671578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016134f7959493929190615933565b602060405180830381600087803b15801561351157600080fd5b505af192505050801561354257506040513d601f19601f8201168201806040525081019061353f91906155b9565b60015b6135e85761354e6155f3565b806308c379a014156135ab5750613563615615565b8061356e57506135ad565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a29190613eaf565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135df9061571d565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461366f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613666906157af565b60405180910390fd5b505b505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061370f575061370e82613a89565b5b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000600283600261374c919061598d565b61375691906152fd565b67ffffffffffffffff81111561376f5761376e613f63565b5b6040519080825280601f01601f1916602001820160405280156137a15781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106137d9576137d8614f11565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061383d5761383c614f11565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261387d919061598d565b61388791906152fd565b90505b6001811115613927577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106138c9576138c8614f11565b5b1a60f81b8282815181106138e0576138df614f11565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613920906159e7565b905061388a565b506000841461396b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161396290615a5d565b60405180910390fd5b8091505092915050565b60008083600101600084815260200190815260200160002054905060008114613a7d5760006001826139a79190615a7d565b90506000600186600001805490506139bf9190615a7d565b9050818114613a2e5760008660000182815481106139e0576139df614f11565b5b9060005260206000200154905080876000018481548110613a0457613a03614f11565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613a4257613a41615ab1565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613a83565b60009150505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6040518060c00160405280600060ff16815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054613b3890614cc7565b90600052602060002090601f016020900481019282613b5a5760008555613ba1565b82601f10613b7357805160ff1916838001178555613ba1565b82800160010185558215613ba1579182015b82811115613ba0578251825591602001919060010190613b85565b5b509050613bae9190613bff565b5090565b828054828255906000526020600020908101928215613bee579160200282015b82811115613bed578251825591602001919060010190613bd2565b5b509050613bfb9190613bff565b5090565b5b80821115613c18576000816000905550600101613c00565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613c5b82613c30565b9050919050565b613c6b81613c50565b8114613c7657600080fd5b50565b600081359050613c8881613c62565b92915050565b6000819050919050565b613ca181613c8e565b8114613cac57600080fd5b50565b600081359050613cbe81613c98565b92915050565b60008060408385031215613cdb57613cda613c26565b5b6000613ce985828601613c79565b9250506020613cfa85828601613caf565b9150509250929050565b613d0d81613c8e565b82525050565b6000602082019050613d286000830184613d04565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613d6381613d2e565b8114613d6e57600080fd5b50565b600081359050613d8081613d5a565b92915050565b600060208284031215613d9c57613d9b613c26565b5b6000613daa84828501613d71565b91505092915050565b60008115159050919050565b613dc881613db3565b82525050565b6000602082019050613de36000830184613dbf565b92915050565b600060208284031215613dff57613dfe613c26565b5b6000613e0d84828501613caf565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e50578082015181840152602081019050613e35565b83811115613e5f576000848401525b50505050565b6000601f19601f8301169050919050565b6000613e8182613e16565b613e8b8185613e21565b9350613e9b818560208601613e32565b613ea481613e65565b840191505092915050565b60006020820190508181036000830152613ec98184613e76565b905092915050565b6000819050919050565b613ee481613ed1565b8114613eef57600080fd5b50565b600081359050613f0181613edb565b92915050565b600060208284031215613f1d57613f1c613c26565b5b6000613f2b84828501613ef2565b91505092915050565b613f3d81613ed1565b82525050565b6000602082019050613f586000830184613f34565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f9b82613e65565b810181811067ffffffffffffffff82111715613fba57613fb9613f63565b5b80604052505050565b6000613fcd613c1c565b9050613fd98282613f92565b919050565b600067ffffffffffffffff821115613ff957613ff8613f63565b5b602082029050602081019050919050565b600080fd5b600061402261401d84613fde565b613fc3565b905080838252602082019050602084028301858111156140455761404461400a565b5b835b8181101561406e578061405a8882613caf565b845260208401935050602081019050614047565b5050509392505050565b600082601f83011261408d5761408c613f5e565b5b813561409d84826020860161400f565b91505092915050565b600080fd5b600067ffffffffffffffff8211156140c6576140c5613f63565b5b6140cf82613e65565b9050602081019050919050565b82818337600083830152505050565b60006140fe6140f9846140ab565b613fc3565b90508281526020810184848401111561411a576141196140a6565b5b6141258482856140dc565b509392505050565b600082601f83011261414257614141613f5e565b5b81356141528482602086016140eb565b91505092915050565b600080600080600060a0868803121561417757614176613c26565b5b600061418588828901613c79565b955050602061419688828901613c79565b945050604086013567ffffffffffffffff8111156141b7576141b6613c2b565b5b6141c388828901614078565b935050606086013567ffffffffffffffff8111156141e4576141e3613c2b565b5b6141f088828901614078565b925050608086013567ffffffffffffffff81111561421157614210613c2b565b5b61421d8882890161412d565b9150509295509295909350565b6000806040838503121561424157614240613c26565b5b600061424f85828601613ef2565b925050602061426085828601613c79565b9150509250929050565b6000602082840312156142805761427f613c26565b5b600061428e84828501613c79565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b6142d9816142c3565b82525050565b600082825260208201905092915050565b60006142fb82613e16565b61430581856142df565b9350614315818560208601613e32565b61431e81613e65565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61435e81613c8e565b82525050565b60006143708383614355565b60208301905092915050565b6000602082019050919050565b600061439482614329565b61439e8185614334565b93506143a983614345565b8060005b838110156143da5781516143c18882614364565b97506143cc8361437c565b9250506001810190506143ad565b5085935050505092915050565b600060c0830160008301516143ff60008601826142d0565b506020830151848203602086015261441782826142f0565b9150506040830151848203604086015261443182826142f0565b9150506060830151848203606086015261444b82826142f0565b9150506080830151848203608086015261446582826142f0565b91505060a083015184820360a086015261447f8282614389565b9150508091505092915050565b600061449883836143e7565b905092915050565b6000602082019050919050565b60006144b882614297565b6144c281856142a2565b9350836020820285016144d4856142b3565b8060005b8581101561451057848403895281516144f1858261448c565b94506144fc836144a0565b925060208a019950506001810190506144d8565b50829750879550505050505092915050565b6000602082019050818103600083015261453c81846144ad565b905092915050565b600067ffffffffffffffff82111561455f5761455e613f63565b5b602082029050602081019050919050565b600061458361457e84614544565b613fc3565b905080838252602082019050602084028301858111156145a6576145a561400a565b5b835b818110156145cf57806145bb8882613c79565b8452602084019350506020810190506145a8565b5050509392505050565b600082601f8301126145ee576145ed613f5e565b5b81356145fe848260208601614570565b91505092915050565b6000806040838503121561461e5761461d613c26565b5b600083013567ffffffffffffffff81111561463c5761463b613c2b565b5b614648858286016145d9565b925050602083013567ffffffffffffffff81111561466957614668613c2b565b5b61467585828601614078565b9150509250929050565b600082825260208201905092915050565b600061469b82614329565b6146a5818561467f565b93506146b083614345565b8060005b838110156146e15781516146c88882614364565b97506146d38361437c565b9250506001810190506146b4565b5085935050505092915050565b600060208201905081810360008301526147088184614690565b905092915050565b600060c08301600083015161472860008601826142d0565b506020830151848203602086015261474082826142f0565b9150506040830151848203604086015261475a82826142f0565b9150506060830151848203606086015261477482826142f0565b9150506080830151848203608086015261478e82826142f0565b91505060a083015184820360a08601526147a88282614389565b9150508091505092915050565b600060208201905081810360008301526147cf8184614710565b905092915050565b600080604083850312156147ee576147ed613c26565b5b60006147fc85828601613ef2565b925050602061480d85828601613caf565b9150509250929050565b61482081613c50565b82525050565b600060208201905061483b6000830184614817565b92915050565b61484a81613db3565b811461485557600080fd5b50565b60008135905061486781614841565b92915050565b6000806040838503121561488457614883613c26565b5b600061489285828601613c79565b92505060206148a385828601614858565b9150509250929050565b60006148b882613c30565b9050919050565b6148c8816148ad565b81146148d357600080fd5b50565b6000813590506148e5816148bf565b92915050565b60006020828403121561490157614900613c26565b5b600061490f848285016148d6565b91505092915050565b614921816142c3565b811461492c57600080fd5b50565b60008135905061493e81614918565b92915050565b600067ffffffffffffffff82111561495f5761495e613f63565b5b61496882613e65565b9050602081019050919050565b600061498861498384614944565b613fc3565b9050828152602081018484840111156149a4576149a36140a6565b5b6149af8482856140dc565b509392505050565b600082601f8301126149cc576149cb613f5e565b5b81356149dc848260208601614975565b91505092915050565b600080600080600080600060e0888a031215614a0457614a03613c26565b5b6000614a128a828b0161492f565b975050602088013567ffffffffffffffff811115614a3357614a32613c2b565b5b614a3f8a828b016149b7565b965050604088013567ffffffffffffffff811115614a6057614a5f613c2b565b5b614a6c8a828b016149b7565b955050606088013567ffffffffffffffff811115614a8d57614a8c613c2b565b5b614a998a828b016149b7565b945050608088013567ffffffffffffffff811115614aba57614ab9613c2b565b5b614ac68a828b016149b7565b93505060a088013567ffffffffffffffff811115614ae757614ae6613c2b565b5b614af38a828b01614078565b92505060c088013567ffffffffffffffff811115614b1457614b13613c2b565b5b614b208a828b016149b7565b91505092959891949750929550565b60008060408385031215614b4657614b45613c26565b5b6000614b5485828601613c79565b9250506020614b6585828601613c79565b9150509250929050565b600080600080600060a08688031215614b8b57614b8a613c26565b5b6000614b9988828901613c79565b9550506020614baa88828901613c79565b9450506040614bbb88828901613caf565b9350506060614bcc88828901613caf565b925050608086013567ffffffffffffffff811115614bed57614bec613c2b565b5b614bf98882890161412d565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000614c62602a83613e21565b9150614c6d82614c06565b604082019050919050565b60006020820190508181036000830152614c9181614c55565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614cdf57607f821691505b60208210811415614cf357614cf2614c98565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614d2681614cc7565b614d308186614cf9565b94506001821660008114614d4b5760018114614d5c57614d8f565b60ff19831686528186019350614d8f565b614d6585614d04565b60005b83811015614d8757815481890152600182019150602081019050614d68565b838801955050505b50505092915050565b6000614da382613e16565b614dad8185614cf9565b9350614dbd818560208601613e32565b80840191505092915050565b6000614dd58285614d19565b9150614de18284614d98565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000614e49602f83613e21565b9150614e5482614ded565b604082019050919050565b60006020820190508181036000830152614e7881614e3c565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614edb602f83613e21565b9150614ee682614e7f565b604082019050919050565b60006020820190508181036000830152614f0a81614ece565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614f7a82613c8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614fad57614fac614f40565b5b600182019050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000615014602983613e21565b915061501f82614fb8565b604082019050919050565b6000602082019050818103600083015261504381615007565b9050919050565b6000615055826142c3565b9150615060836142c3565b92508260ff0382111561507657615075614f40565b5b828201905092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6150aa81613c8e565b82525050565b60006150bc83836150a1565b60208301905092915050565b6000602082019050919050565b6150de81615081565b6150e8818461508c565b92506150f382615097565b8060005b8381101561512457815161510b87826150b0565b9650615116836150c8565b9250506001810190506150f7565b505050505050565b600061513882846150d5565b60608201915081905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006151a3602883613e21565b91506151ae82615147565b604082019050919050565b600060208201905081810360008301526151d281615196565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615235602583613e21565b9150615240826151d9565b604082019050919050565b6000602082019050818103600083015261526481615228565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006152c7602a83613e21565b91506152d28261526b565b604082019050919050565b600060208201905081810360008301526152f6816152ba565b9050919050565b600061530882613c8e565b915061531383613c8e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561534857615347614f40565b5b828201905092915050565b6000604082019050818103600083015261536d8185614690565b905081810360208301526153818184614690565b90509392505050565b60008151905061539981613edb565b92915050565b6000602082840312156153b5576153b4613c26565b5b60006153c38482850161538a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061540682613c8e565b915061541183613c8e565b925082615421576154206153cc565b5b828206905092915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615488602983613e21565b91506154938261542c565b604082019050919050565b600060208201905081810360008301526154b78161547b565b9050919050565b60006040820190506154d36000830185613d04565b6154e06020830184613d04565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061550e826154e7565b61551881856154f2565b9350615528818560208601613e32565b61553181613e65565b840191505092915050565b600060a0820190506155516000830188614817565b61555e6020830187614817565b81810360408301526155708186614690565b905081810360608301526155848185614690565b905081810360808301526155988184615503565b90509695505050505050565b6000815190506155b381613d5a565b92915050565b6000602082840312156155cf576155ce613c26565b5b60006155dd848285016155a4565b91505092915050565b60008160e01c9050919050565b600060033d11156156125760046000803e61560f6000516155e6565b90505b90565b600060443d1015615625576156a8565b61562d613c1c565b60043d036004823e80513d602482011167ffffffffffffffff821117156156555750506156a8565b808201805167ffffffffffffffff81111561567357505050506156a8565b80602083010160043d0385018111156156905750505050506156a8565b61569f82602001850186613f92565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615707603483613e21565b9150615712826156ab565b604082019050919050565b60006020820190508181036000830152615736816156fa565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615799602883613e21565b91506157a48261573d565b604082019050919050565b600060208201905081810360008301526157c88161578c565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615805601783614cf9565b9150615810826157cf565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615851601183614cf9565b915061585c8261581b565b601182019050919050565b6000615872826157f8565b915061587e8285614d98565b915061588982615844565b91506158958284614d98565b91508190509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006158fd602183613e21565b9150615908826158a1565b604082019050919050565b6000602082019050818103600083015261592c816158f0565b9050919050565b600060a0820190506159486000830188614817565b6159556020830187614817565b6159626040830186613d04565b61596f6060830185613d04565b81810360808301526159818184615503565b90509695505050505050565b600061599882613c8e565b91506159a383613c8e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156159dc576159db614f40565b5b828202905092915050565b60006159f282613c8e565b91506000821415615a0657615a05614f40565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615a47602083613e21565b9150615a5282615a11565b602082019050919050565b60006020820190508181036000830152615a7681615a3a565b9050919050565b6000615a8882613c8e565b9150615a9383613c8e565b925082821015615aa657615aa5614f40565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122044c0dcd501038ab92367a1035dd0ad64443ac09a9253141839ec1f450fc51aaa64736f6c63430008090033",
  "devdoc": {
    "author": "TobowerTheGreatAxios",
    "details": "This smart contract is an ERC-1155 standard contractThis contract is the core tokens for the mini-game*",
    "events": {
      "NewItem(uint256)": {
        "details": "Used in the [addItem] function",
        "params": {
          "tokenId": "The [tokenId] that was created"
        }
      },
      "NewPlayer(address,uint256[3])": {
        "details": "Used in the [initialMint] functionAll Tokens Minted will be equal to 1",
        "params": {
          "initialTokens": "The [initialTokens] that were added EXACT === 3",
          "newPlayer": "The [newPlayer]that was added by address"
        }
      },
      "TierUnlocked(address,uint256,uint8)": {
        "details": "Used inside the [winBattle] function",
        "params": {
          "player": "The [player] who is unlocked a new tier",
          "tier": "The [tier] that was unlocked",
          "tokenId": "The [tokenId] that was granted for this new tier"
        }
      },
      "Winner(address)": {
        "details": "Fires once a player has all of the last tier of items",
        "params": {
          "player": "the address of the winner"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addItem(uint8,string,string,string,string,uint256[],string)": {
        "details": "Creates Metadata -> Stores as New IndexSets Token URI for Backward Compatability with MarketplacesUpdates Number Of ItemsEmits [NewItem] event",
        "params": {
          "animation": "Animation of the Item",
          "beats": "List of who the token beats",
          "description": "Description of the Item",
          "image": "Image of the Item",
          "name": "Name of the Item",
          "tokenURI": "Gen I Token URI"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getItems(address)": {
        "details": "Thoughts on making this a signed request during ETH CC?",
        "params": {
          "_address": "of the user"
        },
        "returns": {
          "_0": "GameItemMetadata[] the items of the player"
        }
      },
      "getNumberItems()": {
        "returns": {
          "_0": "uint256 of the number of active game items"
        }
      },
      "getNumberPlayers()": {
        "returns": {
          "_0": ""
        }
      },
      "getOnChainToken(uint256)": {
        "params": {
          "tokenId": "of the token to retreive"
        },
        "returns": {
          "_0": "GameItemMetadata of the Item"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUnlockDate()": {
        "details": "Can be deprecated",
        "returns": {
          "_0": "uint256 time in epoch * 1000"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialMint(address)": {
        "details": "Initial Mint FunctionOnly Callalble by MINTER_ROLEEmits [NewPlayer] event and adds a new player",
        "params": {
          "receiver": "the individual receiving the intial mint"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isLocked()": {
        "details": "Internal/ExternalReturns True if Locked",
        "returns": {
          "_0": "bool if is locked"
        }
      },
      "playoff()": {
        "details": "Uses RNG to Find # between 0-1000Returns true for P2, False for P2",
        "returns": {
          "_0": "bool "
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the concatenation of the `_baseURI` and the token-specific uri if the latter is set This enables the following behaviors: - if `_tokenURIs[tokenId]` is set, then the result is the concatenation   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`   is empty per default); - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`   which in most cases will contain `ERC1155._uri`; - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a   uri value set, then the result is empty."
      },
      "winBattle(address,uint256)": {
        "details": "On Battle Win -> Win Manager Mints",
        "params": {
          "receiever": "the user that wins",
          "tokenId": "The tokenId to be minted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewItem(uint256)": {
        "notice": "Emits a new item being added to the contract [token]"
      },
      "NewPlayer(address,uint256[3])": {
        "notice": "Emits a new player being added to the contract [address]"
      },
      "TierUnlocked(address,uint256,uint8)": {
        "notice": "Emits a TierUnlocked allowing for the frontend to notify the player"
      },
      "Winner(address)": {
        "notice": "Emits a Winner event"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Admin Role to Toggle Contract"
      },
      "MINTER_APPRENTICE_ROLE()": {
        "notice": "Minter Role Apprentice"
      },
      "MINTER_ROLE()": {
        "notice": "Can Fire Initial Mint"
      },
      "WIN_MANAGER_ROLE()": {
        "notice": "Can Mint on Wini"
      },
      "addItem(uint8,string,string,string,string,uint256[],string)": {
        "notice": "Admin Function that enables the admin owner to add new tokens to the contract storage"
      },
      "getItems(address)": {
        "notice": "Loads all the Metadata by a player in order to allow them to load the data"
      },
      "getNumberItems()": {
        "notice": "Retrieves the Total Number of Items in the Game"
      },
      "getNumberPlayers()": {
        "notice": "Retreives the current number of players/holders"
      },
      "getOnChainToken(uint256)": {
        "notice": "Returns on Chain Token - Single (Metadata)"
      },
      "getUnlockDate()": {
        "notice": "Retreives Unlock Date"
      },
      "isLocked()": {
        "notice": "Checks if contract is locked"
      },
      "playoff()": {
        "notice": "Playoff Function for Battle.sol"
      },
      "supportsInterface(bytes4)": {
        "notice": "Required for Inheriting Contracts"
      },
      "winBattle(address,uint256)": {
        "notice": "WIN_MANAGER_CALL"
      }
    },
    "notice": "GameItems for ETH CC",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2922_storage)"
      },
      {
        "astId": 568,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 574,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 576,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_uri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1941,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_baseURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1945,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3253,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "numberItems",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3256,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "numberPlayers",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "metadata",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(GameItemMetadata)4317_storage)"
      },
      {
        "astId": 3269,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "tierTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3293,
        "contract": "contracts/GameItems.sol:GameItems",
        "label": "unlockDate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2922_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2922_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(GameItemMetadata)4317_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGameItems.GameItemMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(GameItemMetadata)4317_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2922_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2921,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2621_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(GameItemMetadata)4317_storage": {
        "encoding": "inplace",
        "label": "struct IGameItems.GameItemMetadata",
        "members": [
          {
            "astId": 4305,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "tier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4307,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4309,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4311,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "image",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4313,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "animationUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4316,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "beats",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2621_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2616,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2620,
            "contract": "contracts/GameItems.sol:GameItems",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}