/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BattleInterface extends utils.Interface {
  functions: {
    "battle(address,bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "commitItem(bytes32)": FunctionFragment;
    "getCommitment(address)": FunctionFragment;
    "getGameItemContract()": FunctionFragment;
    "getRecord(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "battle"
      | "commitItem"
      | "getCommitment"
      | "getGameItemContract"
      | "getRecord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "battle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitItem",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameItemContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameItemContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;

  events: {
    "BattleCompleted(address,address,uint8,uint256,uint256)": EventFragment;
    "Cheater(address)": EventFragment;
    "Committed(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BattleCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cheater"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Committed"): EventFragment;
}

export interface BattleCompletedEventObject {
  playerOne: string;
  playerTwo: string;
  result: number;
  playerOneItem: BigNumber;
  playerTwoItem: BigNumber;
}
export type BattleCompletedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  BattleCompletedEventObject
>;

export type BattleCompletedEventFilter = TypedEventFilter<BattleCompletedEvent>;

export interface CheaterEventObject {
  cheater: string;
}
export type CheaterEvent = TypedEvent<[string], CheaterEventObject>;

export type CheaterEventFilter = TypedEventFilter<CheaterEvent>;

export interface CommittedEventObject {
  committer: string;
  commitment: string;
  commitmentNumber: BigNumber;
}
export type CommittedEvent = TypedEvent<
  [string, string, BigNumber],
  CommittedEventObject
>;

export type CommittedEventFilter = TypedEventFilter<CommittedEvent>;

export interface Battle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BattleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    battle(
      p2: PromiseOrValue<string>,
      p2Salt: PromiseOrValue<BytesLike>,
      p2TokenId: PromiseOrValue<BigNumberish>,
      p1Salt: PromiseOrValue<BytesLike>,
      p1TokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitItem(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommitment(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGameItemContract(overrides?: CallOverrides): Promise<[string]>;

    getRecord(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
  };

  battle(
    p2: PromiseOrValue<string>,
    p2Salt: PromiseOrValue<BytesLike>,
    p2TokenId: PromiseOrValue<BigNumberish>,
    p1Salt: PromiseOrValue<BytesLike>,
    p1TokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitItem(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommitment(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGameItemContract(overrides?: CallOverrides): Promise<string>;

  getRecord(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  callStatic: {
    battle(
      p2: PromiseOrValue<string>,
      p2Salt: PromiseOrValue<BytesLike>,
      p2TokenId: PromiseOrValue<BigNumberish>,
      p1Salt: PromiseOrValue<BytesLike>,
      p1TokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitItem(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommitment(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGameItemContract(overrides?: CallOverrides): Promise<string>;

    getRecord(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
  };

  filters: {
    "BattleCompleted(address,address,uint8,uint256,uint256)"(
      playerOne?: PromiseOrValue<string> | null,
      playerTwo?: PromiseOrValue<string> | null,
      result?: null,
      playerOneItem?: null,
      playerTwoItem?: null
    ): BattleCompletedEventFilter;
    BattleCompleted(
      playerOne?: PromiseOrValue<string> | null,
      playerTwo?: PromiseOrValue<string> | null,
      result?: null,
      playerOneItem?: null,
      playerTwoItem?: null
    ): BattleCompletedEventFilter;

    "Cheater(address)"(
      cheater?: PromiseOrValue<string> | null
    ): CheaterEventFilter;
    Cheater(cheater?: PromiseOrValue<string> | null): CheaterEventFilter;

    "Committed(address,bytes32,uint256)"(
      committer?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null,
      commitmentNumber?: null
    ): CommittedEventFilter;
    Committed(
      committer?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null,
      commitmentNumber?: null
    ): CommittedEventFilter;
  };

  estimateGas: {
    battle(
      p2: PromiseOrValue<string>,
      p2Salt: PromiseOrValue<BytesLike>,
      p2TokenId: PromiseOrValue<BigNumberish>,
      p1Salt: PromiseOrValue<BytesLike>,
      p1TokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitItem(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommitment(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameItemContract(overrides?: CallOverrides): Promise<BigNumber>;

    getRecord(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    battle(
      p2: PromiseOrValue<string>,
      p2Salt: PromiseOrValue<BytesLike>,
      p2TokenId: PromiseOrValue<BigNumberish>,
      p1Salt: PromiseOrValue<BytesLike>,
      p1TokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitItem(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommitment(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameItemContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecord(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
