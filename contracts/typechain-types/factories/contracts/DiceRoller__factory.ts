/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DiceRoller,
  DiceRollerInterface,
} from "../../contracts/DiceRoller";

const _abi = [
  {
    inputs: [],
    name: "getRandom",
    outputs: [
      {
        internalType: "bytes32",
        name: "rnd",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ce8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063aacc5a1714602d575b600080fd5b60336047565b604051603e9190607f565b60405180910390f35b60006040516000810160208160008060185afa605f57fe5b81519250505090565b6000819050919050565b6079816068565b82525050565b6000602082019050609260008301846072565b9291505056fea2646970667358221220e1c5d1fa72c3dcfbfc1a8cf2175ddc2e3b2aee996fc9aaa25e729a8e2e0b1a2164736f6c63430008090033";

type DiceRollerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiceRollerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiceRoller__factory extends ContractFactory {
  constructor(...args: DiceRollerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiceRoller> {
    return super.deploy(overrides || {}) as Promise<DiceRoller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiceRoller {
    return super.attach(address) as DiceRoller;
  }
  override connect(signer: Signer): DiceRoller__factory {
    return super.connect(signer) as DiceRoller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiceRollerInterface {
    return new utils.Interface(_abi) as DiceRollerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiceRoller {
    return new Contract(address, _abi, signerOrProvider) as DiceRoller;
  }
}
